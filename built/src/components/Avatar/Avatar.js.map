{"version":3,"file":"Avatar.js","sourceRoot":"","sources":["../../../../src/components/Avatar/Avatar.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React from 'react'\n\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport * as Styles from './style'\nimport {\n  facebook,\n  googlebusiness,\n  instagram,\n  linkedin,\n  pinterest,\n  shopify,\n  tiktok,\n  twitter,\n  startpage,\n  mastodon,\n  youtube,\n} from '../style/colors'\nimport {\n  Facebook,\n  Gbp,\n  Instagram,\n  LinkedIn,\n  Pinterest,\n  Shopify,\n  Tiktok,\n  Twitter,\n  StartPage,\n  Mastodon,\n  Youtube,\n} from '../Icon'\n\nconst Wrapper = styled.div`\n  ${(props) =>  \n// @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n Styles.wrapper[props.size]}\n`\n\nconst Image = styled.div`\n  ${(props) =>  \n// @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n Styles.image[props.type][props.size]}\n`\n\nconst socialIconMap = new Map([\n  [\n    'instagram',\n    // @ts-expect-error TS(7031) FIXME: Binding element 'size' implicitly has an 'any' typ... Remove this comment to see the full error message\n    ({ size }) => (\n      <Styles.SocialIconWrapper size={size} bgColor={instagram}>\n        <Instagram size=\"small\" color=\"white\" />\n      </Styles.SocialIconWrapper>\n    ),\n  ],\n  [\n    'facebook',\n    // @ts-expect-error TS(7031) FIXME: Binding element 'size' implicitly has an 'any' typ... Remove this comment to see the full error message\n    ({ size }) => (\n      <Styles.SocialIconWrapper size={size} bgColor={facebook}>\n        <Facebook size=\"small\" color=\"white\" />\n      </Styles.SocialIconWrapper>\n    ),\n  ],\n  [\n    'twitter',\n    // @ts-expect-error TS(7031) FIXME: Binding element 'size' implicitly has an 'any' typ... Remove this comment to see the full error message\n    ({ size }) => (\n      <Styles.SocialIconWrapper size={size} bgColor={twitter}>\n        <Twitter size=\"small\" color=\"white\" />\n      </Styles.SocialIconWrapper>\n    ),\n  ],\n  [\n    'linkedin',\n    // @ts-expect-error TS(7031) FIXME: Binding element 'size' implicitly has an 'any' typ... Remove this comment to see the full error message\n    ({ size }) => (\n      <Styles.SocialIconWrapper size={size} bgColor={linkedin}>\n        <LinkedIn size=\"small\" color=\"white\" />\n      </Styles.SocialIconWrapper>\n    ),\n  ],\n  [\n    'pinterest',\n    // @ts-expect-error TS(7031) FIXME: Binding element 'size' implicitly has an 'any' typ... Remove this comment to see the full error message\n    ({ size }) => (\n      <Styles.SocialIconWrapper size={size} bgColor={pinterest}>\n        <Pinterest size=\"small\" color=\"white\" />\n      </Styles.SocialIconWrapper>\n    ),\n  ],\n  [\n    'googlebusiness',\n    // @ts-expect-error TS(7031) FIXME: Binding element 'size' implicitly has an 'any' typ... Remove this comment to see the full error message\n    ({ size }) => (\n      <Styles.SocialIconWrapper size={size} bgColor={googlebusiness}>\n        <Gbp size=\"small\" color=\"white\" />\n      </Styles.SocialIconWrapper>\n    ),\n  ],\n  [\n    'shopify',\n    // @ts-expect-error TS(7031) FIXME: Binding element 'size' implicitly has an 'any' typ... Remove this comment to see the full error message\n    ({ size }) => (\n      <Styles.SocialIconWrapper size={size} bgColor={shopify}>\n        <Shopify size=\"small\" color=\"white\" />\n      </Styles.SocialIconWrapper>\n    ),\n  ],\n  [\n    'tiktok',\n    // @ts-expect-error TS(7031) FIXME: Binding element 'size' implicitly has an 'any' typ... Remove this comment to see the full error message\n    ({ size }) => (\n      <Styles.SocialIconWrapper size={size} bgColor={tiktok}>\n        <Tiktok size=\"small\" color=\"white\" />\n      </Styles.SocialIconWrapper>\n    ),\n  ],\n  [\n    'startPage',\n    // @ts-expect-error TS(7031) FIXME: Binding element 'size' implicitly has an 'any' typ... Remove this comment to see the full error message\n    ({ size }) => (\n      <Styles.SocialIconWrapper size={size} bgColor={startpage}>\n        <Styles.StartPageIcon>\n          <StartPage size=\"small\" color=\"white\" />{' '}\n        </Styles.StartPageIcon>\n      </Styles.SocialIconWrapper>\n    ),\n  ],\n  [\n    'mastodon',\n    // @ts-expect-error TS(7031) FIXME: Binding element 'size' implicitly has an 'any' typ... Remove this comment to see the full error message\n    ({ size }) => (\n      <Styles.SocialIconWrapper size={size} bgColor={mastodon}>\n        <Mastodon size=\"small\" color=\"white\" />\n      </Styles.SocialIconWrapper>\n    ),\n  ],\n  [\n    'youtube',\n    // @ts-expect-error TS(7031) FIXME: Binding element 'size' implicitly has an 'any' typ... Remove this comment to see the full error message\n    ({ size }) => (\n      <Styles.SocialIconWrapper size={size} bgColor={youtube}>\n        <Youtube size=\"small\" color=\"white\" />\n      </Styles.SocialIconWrapper>\n    ),\n  ],\n])\n\n// @ts-expect-error TS(7031) FIXME: Binding element 'src' implicitly has an 'any' type... Remove this comment to see the full error message\nconst Avatar = ({ src, alt, type, size, network, fallbackUrl }) => {\n  const SocialIcon = network && socialIconMap.get(network)\n  return (\n    <Wrapper size={size}>\n      {SocialIcon && <SocialIcon size={size} />}\n      <Image\n        size={size}\n        type={type}\n        src={src}\n        fallbackUrl={fallbackUrl}\n        alt={alt}\n      />\n    </Wrapper>\n  )\n}\n\nAvatar.propTypes = {\n  /** The source of the avatar image. */\n  src: PropTypes.string.isRequired,\n  /** The alt text for the avatar image. */\n  alt: PropTypes.string.isRequired,\n  /** The fallback url for the avatar image. */\n  fallbackUrl: PropTypes.string,\n  /** Can be `'default'` (default, plain avatar), `'status'` (online/offline indicator) or `'social'` (has social network icon from the `network` prop). */\n  type: PropTypes.oneOf(['default', 'social', 'status']),\n  /** Can be `'small'`, `'medium'` or `'large'` (`32px`, `40px` and `48px` respectively). */\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n  /** Name of social network icon to overlay. (E.g., `'instagram'`). Only applicable when `{ type: 'social' }` */\n  network: PropTypes.oneOf([\n    'facebook',\n    'twitter',\n    'instagram',\n    'linkedin',\n    'google',\n    'pinterest',\n    'shopify',\n    'tiktok',\n    'startPage',\n    'googlebusiness',\n    'mastodon',\n    'youtube',\n  ]),\n}\n\nAvatar.defaultProps = {\n  type: 'default',\n  size: 'small',\n  fallbackUrl: '',\n  network: null,\n}\n\nexport default Avatar\n"]}