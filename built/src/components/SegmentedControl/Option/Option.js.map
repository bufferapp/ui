{"version":3,"file":"Option.js","sourceRoot":"","sources":["../../../../../src/components/SegmentedControl/Option/Option.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport PropTypes from 'prop-types'\n\nimport Tooltip from '../../Tooltip'\nimport { OptionStyled, ContentWrapper, Label, IconWrapper } from './style'\n\n/**\n * Option component for Segmented Control component.\n */\n// @ts-expect-error TS(7006) FIXME: Parameter 'props' implicitly has an 'any' type.\nconst Option = (props) => {\n  const {\n    selected,\n    disabled,\n    icon,\n    label,\n    value,\n    optionType,\n    iconPosition,\n    size,\n    tooltip,\n    onClick,\n  } = props\n\n  // Whether or not to attempt to render an icon\n  const showIcon = optionType === 'icon' || optionType === 'textAndIcon'\n  // Whether or not to render a label\n  const showLabel = optionType === 'text' || optionType === 'textAndIcon'\n\n  const tooltipMessage = useMemo(() => {\n    // If tooltip message is provided, show it\n    if (tooltip) return tooltip\n    // If no tooltip message is provided, but optionType is 'icon'\n    // derive a tooltip message from the provided label\n    if (optionType === 'icon') return `View ${label} only`\n  }, [optionType, tooltip, label])\n\n  const handleClick = () => {\n    // Only run onClick callback if option is not disabled\n    if (!disabled) onClick(value)\n  }\n\n  const renderContent = () => (\n    <ContentWrapper iconPosition={iconPosition}>\n      {icon && showIcon && <IconWrapper>{icon}</IconWrapper>}\n\n      {label && showLabel && (\n        <Label optionType={optionType} iconPosition={iconPosition}>\n          {label}\n        </Label>\n      )}\n    </ContentWrapper>\n  )\n\n  return (\n    <OptionStyled\n      selected={!disabled && selected}\n      aria-pressed={!disabled && selected}\n      disabled={disabled}\n      size={size}\n      onClick={handleClick}\n      tabIndex=\"0\"\n      role=\"button\"\n    >\n      {tooltipMessage ? (\n        // @ts-expect-error TS(2322) FIXME: Type '{ children: Element; label: any; }' is not a... Remove this comment to see the full error message\n        <Tooltip label={tooltipMessage}>{renderContent()}</Tooltip>\n      ) : (\n        renderContent()\n      )}\n    </OptionStyled>\n  )\n}\n\nOption.propTypes = {\n  /** Type of options. Options: text, icon, textAndIcon. */\n  optionType: PropTypes.oneOf(['text', 'icon', 'textAndIcon']).isRequired,\n\n  /** Size of control. Options: small, normal, large. */\n  size: PropTypes.oneOf(['small', 'normal', 'large']),\n\n  /** It disables the option. </i> */\n  disabled: PropTypes.bool,\n\n  /** The title of the icon to pass to the Icon component */\n  icon: PropTypes.node,\n\n  /** The position of the icon relative to the label. Can be `top`, `right`, `bottom`, `left`. */\n  iconPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n\n  /** The option label */\n  label: PropTypes.string.isRequired,\n\n  /** The option value */\n  value: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.bool,\n  ]).isRequired,\n\n  /** Optional custom tooltip message to display on hover */\n  tooltip: PropTypes.string,\n\n  /** Whether the option is the selected one */\n  selected: PropTypes.bool.isRequired,\n\n  /** onClick callback function */\n  onClick: PropTypes.func,\n}\n\nOption.defaultProps = {\n  size: 'normal',\n  disabled: false,\n  icon: null,\n  iconPosition: 'left',\n  tooltip: '',\n  onClick: () => null,\n}\n\nexport default Option\n"]}