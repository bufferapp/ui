{"version":3,"file":"CrossSell.js","sourceRoot":"","sources":["../../../../src/components/CrossSell/CrossSell.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport PropTypes from 'prop-types'\nimport {\n  CrossSellStyled,\n  CrossSellHeader,\n  SubHeaderWrapper,\n  CardsContainer,\n  ButtonsContainer,\n  ButtonWrapper,\n  Footer,\n  Card,\n  TitleContainer,\n  CardImage,\n} from './style'\nimport Text from '../Text/Text'\nimport Button from '../Button/Button'\n\nexport default class CrossSell extends React.Component {\n  renderHeader = () => {\n    // @ts-expect-error TS(2339) FIXME: Property 'texts' does not exist on type 'Readonly<... Remove this comment to see the full error message\n    const { texts } = this.props\n\n    return (\n      <CrossSellHeader>\n        <Text type=\"h1\">{texts.title}</Text>\n        <SubHeaderWrapper>\n          <Text type=\"h3\">{texts.subtitle}</Text>\n        </SubHeaderWrapper>\n      </CrossSellHeader>\n    )\n  }\n\n  renderBody = () => {\n    // @ts-expect-error TS(2339) FIXME: Property 'texts' does not exist on type 'Readonly<... Remove this comment to see the full error message\n    const { texts } = this.props\n\n    return (\n      <CardsContainer>\n        {/* @ts-expect-error TS(7006) FIXME: Parameter 'card' implicitly has an 'any' type. */}\n        {texts.cards.map((card, idx) => (\n          <Card key={idx}>\n            <CardImage src={card.image} alt={card.alt} />\n            <TitleContainer>\n              <Text type=\"h3\">{card.title}</Text>\n            </TitleContainer>\n            <Text type=\"p\">{card.description}</Text>\n          </Card>\n        ))}\n      </CardsContainer>\n    )\n  }\n\n  renderFooter = () => {\n    // @ts-expect-error TS(2339) FIXME: Property 'texts' does not exist on type 'Readonly<... Remove this comment to see the full error message\n    const { button, priceTagline } = this.props.texts\n\n    return (\n      <Footer>\n        <ButtonsContainer>\n          <ButtonWrapper>\n            {/* @ts-expect-error TS(2740) FIXME: Type '{ type: string; size: string; onClick: () =>... Remove this comment to see the full error message */}\n            <Button\n              type=\"primary\"\n              size=\"large\"\n              onClick={() => window.location.replace(button.url)}\n              label={button.label}\n              fullWidth\n            />\n          </ButtonWrapper>\n        </ButtonsContainer>\n        <Text type=\"p\">{priceTagline}</Text>\n      </Footer>\n    )\n  }\n\n  render() {\n    return (\n      <CrossSellStyled>\n        {this.renderHeader()}\n        {this.renderBody()}\n        {this.renderFooter()}\n      </CrossSellStyled>\n    )\n  }\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'propTypes' does not exist on type 'typeo... Remove this comment to see the full error message\nCrossSell.propTypes = {\n  texts: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    cards: PropTypes.arrayOf(\n      PropTypes.shape({\n        image: PropTypes.string,\n        alt: PropTypes.string,\n        title: PropTypes.string,\n        description: PropTypes.string,\n      }),\n    ),\n    button: PropTypes.shape({\n      label: PropTypes.string,\n      url: PropTypes.string,\n    }),\n    priceTagline: PropTypes.string,\n  }).isRequired,\n}\n"]}