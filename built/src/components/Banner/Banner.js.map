{"version":3,"file":"Banner.js","sourceRoot":"","sources":["../../../../src/components/Banner/Banner.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Button from '../Button'\nimport Text from '../Text'\nimport CrossIcon from '../Icon/Icons/Cross'\n\nimport {\n  BannerStyled,\n  BannerCloseButton,\n  Wrapper,\n  ButtonWrapper,\n} from './style'\n\nimport { orangeDarker } from '../style/colors'\n\nexport default class Banner extends React.Component {\n  // @ts-expect-error TS(7006) FIXME: Parameter 'props' implicitly has an 'any' type.\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isOpen: true,\n    }\n\n    this.closeBanner = this.closeBanner.bind(this)\n  }\n\n  closeBanner() {\n    this.setState({ isOpen: false })\n    // @ts-expect-error TS(2339) FIXME: Property 'onCloseBanner' does not exist on type 'R... Remove this comment to see the full error message\n    const { onCloseBanner } = this.props\n    if (onCloseBanner) {\n      onCloseBanner()\n    }\n  }\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'themeColor' implicitly has an 'any' typ... Remove this comment to see the full error message\n  renderBannerContent(themeColor) {\n    // @ts-expect-error TS(2339) FIXME: Property 'customHTML' does not exist on type 'Read... Remove this comment to see the full error message\n    const { customHTML, text, actionButton } = this.props\n    if (customHTML) {\n      return (\n        <Wrapper>\n          {/* eslint-disable-next-line */}\n          <div dangerouslySetInnerHTML={customHTML} />\n        </Wrapper>\n      )\n    }\n    return (\n      <Wrapper>\n        <Text type=\"paragraph\" color=\"#FFF\">\n          {text}\n        </Text>\n        <ButtonWrapper>\n          {/* @ts-expect-error TS(2740) FIXME: Type '{ type: string; onClick: any; label: any; si... Remove this comment to see the full error message */}\n          <Button\n            type={themeColor === 'orange' ? 'orange' : 'primary'}\n            onClick={actionButton.action}\n            label={actionButton.label}\n            size=\"small\"\n          />\n        </ButtonWrapper>\n      </Wrapper>\n    )\n  }\n\n  render() {\n    // @ts-expect-error TS(2339) FIXME: Property 'isOpen' does not exist on type 'Readonly... Remove this comment to see the full error message\n    const { isOpen } = this.state\n    // @ts-expect-error TS(2339) FIXME: Property 'themeColor' does not exist on type 'Read... Remove this comment to see the full error message\n    const { themeColor } = this.props\n\n    if (isOpen) {\n      return (\n        <BannerStyled themeColor={themeColor}>\n          {this.renderBannerContent(themeColor)}\n          <BannerCloseButton>\n            {/* @ts-expect-error TS(2740) FIXME: Type '{ type: string; icon: Element; hasIconOnly: ... Remove this comment to see the full error message */}\n            <Button\n              type=\"text\"\n              icon={(\n                <CrossIcon\n                  color={themeColor === 'blue' ? '#fff' : orangeDarker}\n                />\n)}\n              hasIconOnly\n              onClick={this.closeBanner}\n              label=\"Close\"\n              size=\"small\"\n            />\n          </BannerCloseButton>\n        </BannerStyled>\n      )\n    }\n    return null\n  }\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'propTypes' does not exist on type 'typeo... Remove this comment to see the full error message\nBanner.propTypes = {\n  /** The main text of the banner */\n  text: PropTypes.string,\n\n  /** The text of the Call To Action of the banner */\n  actionButton: PropTypes.shape({\n    label: PropTypes.string,\n    action: PropTypes.func,\n  }),\n\n  /** Custom HTML */\n  customHTML: PropTypes.shape({ __html: PropTypes.string }),\n\n  /** Theme color. Can be `'blue'` or `'orange'` */\n  themeColor: PropTypes.oneOf(['blue', 'orange']),\n\n  /** Handler when the banner closes */\n  onCloseBanner: PropTypes.func,\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'defaultProps' does not exist on type 'ty... Remove this comment to see the full error message\nBanner.defaultProps = {\n  text: '',\n  actionButton: {},\n  customHTML: null,\n  themeColor: 'blue',\n  onCloseBanner: null,\n}\n"]}