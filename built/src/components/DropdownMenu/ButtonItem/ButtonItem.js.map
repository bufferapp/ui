{"version":3,"file":"ButtonItem.js","sourceRoot":"","sources":["../../../../../src/components/DropdownMenu/ButtonItem/ButtonItem.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { ButtonItemStyled, ButtonLabel } from '../style'\nimport { Checkmark as CheckmarkIcon } from '../../Icon'\nimport { green } from '../../style/colors'\nimport { keyCode } from '../keyCode'\n\nexport default class ButtonItem extends React.Component {\n  // @ts-expect-error TS(7006) FIXME: Parameter 'props' implicitly has an 'any' type.\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      tabIndex: '-1',\n    }\n\n    // @ts-expect-error TS(2339) FIXME: Property 'keyCode' does not exist on type 'ButtonI... Remove this comment to see the full error message\n    this.keyCode = keyCode\n    this.handleKeydown = this.handleKeydown.bind(this)\n  }\n\n  componentDidMount() {\n    // @ts-expect-error TS(2339) FIXME: Property 'item' does not exist on type 'ButtonItem... Remove this comment to see the full error message\n    this.item.addEventListener('click', this.handleClick)\n    // @ts-expect-error TS(2339) FIXME: Property 'item' does not exist on type 'ButtonItem... Remove this comment to see the full error message\n    this.item.addEventListener('keydown', this.handleKeydown)\n  }\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'prevProps' implicitly has an 'any' type... Remove this comment to see the full error message\n  componentDidUpdate(prevProps) {\n    // @ts-expect-error TS(2339) FIXME: Property 'shouldFocus' does not exist on type 'Rea... Remove this comment to see the full error message\n    if (this.props.shouldFocus) {\n      this.updateTabIndexIfNeeded(prevProps)\n    }\n  }\n\n  componentWillUnmount() {\n    // @ts-expect-error TS(2339) FIXME: Property 'item' does not exist on type 'ButtonItem... Remove this comment to see the full error message\n    this.item.removeEventListener('click', this.handleClick)\n    // @ts-expect-error TS(2339) FIXME: Property 'item' does not exist on type 'ButtonItem... Remove this comment to see the full error message\n    this.item.removeEventListener('keydown', this.handleKeydown)\n  }\n\n  setFocusToItem() {\n    // @ts-expect-error TS(2339) FIXME: Property 'shouldFocus' does not exist on type 'Rea... Remove this comment to see the full error message\n    const { shouldFocus } = this.props\n    const newTabIndex = shouldFocus ? '0' : '-1'\n\n    if (shouldFocus) {\n      // @ts-expect-error TS(2339) FIXME: Property 'item' does not exist on type 'ButtonItem... Remove this comment to see the full error message\n      this.item.focus()\n    }\n    this.setState({ tabIndex: newTabIndex })\n  }\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.\n  handleKeydown = (event) => {\n    let flag = false\n    switch (event.keyCode) {\n      // @ts-expect-error TS(2339) FIXME: Property 'keyCode' does not exist on type 'ButtonI... Remove this comment to see the full error message\n      case this.keyCode.SPACE:\n      // @ts-expect-error TS(2339) FIXME: Property 'keyCode' does not exist on type 'ButtonI... Remove this comment to see the full error message\n      case this.keyCode.RETURN:\n        {\n          const {\n            // @ts-expect-error TS(2339) FIXME: Property 'item' does not exist on type 'Readonly<{... Remove this comment to see the full error message\n            item: { onItemClick },\n          } = this.props\n          if (onItemClick) {\n            onItemClick()\n            flag = true\n          }\n        }\n        break\n      default:\n        break\n    }\n\n    if (flag) {\n      event.stopPropagation()\n      event.preventDefault()\n    }\n  }\n\n  handleClick = () => {\n    // @ts-expect-error TS(2339) FIXME: Property 'item' does not exist on type 'ButtonItem... Remove this comment to see the full error message\n    this.item.focus()\n  }\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'prevProps' implicitly has an 'any' type... Remove this comment to see the full error message\n  updateTabIndexIfNeeded(prevProps) {\n    // @ts-expect-error TS(2339) FIXME: Property 'shouldFocus' does not exist on type 'Rea... Remove this comment to see the full error message\n    if (prevProps.shouldFocus !== this.props.shouldFocus) {\n      this.setFocusToItem()\n    }\n  }\n\n  render() {\n    const {\n      // @ts-expect-error TS(2339) FIXME: Property 'item' does not exist on type 'Readonly<{... Remove this comment to see the full error message\n      item: { type, title, onItemClick, icon, selected, disabled, colors, tag },\n      // @ts-expect-error TS(2339) FIXME: Property 'ariaHaspopup' does not exist on type 'Re... Remove this comment to see the full error message\n      ariaHaspopup,\n    } = this.props\n    const hasIcon = !!icon || !!selected\n\n    return (\n      <ButtonItemStyled\n        // @ts-expect-error TS(7006) FIXME: Parameter 'item' implicitly has an 'any' type.\n        ref={(item) => (this.item = item)}\n        type=\"button\"\n        role=\"menuitem\"\n        fullWidth\n        // @ts-expect-error TS(7006) FIXME: Parameter 'ev' implicitly has an 'any' type.\n        onKeyDown={(ev) => this.handleKeydown(ev)}\n        // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.\n        onClick={(event) => {\n          if (onItemClick) onItemClick()\n          event.stopPropagation()\n          event.preventDefault()\n        }}\n        // @ts-expect-error TS(2339) FIXME: Property 'tabIndex' does not exist on type 'Readon... Remove this comment to see the full error message\n        tabIndex={this.state.tabIndex}\n        aria-haspopup={ariaHaspopup}\n        disabled={disabled}\n        colors={colors}\n      >\n        {selected && <CheckmarkIcon color={green} />}\n        {icon || null}\n        <ButtonLabel hasIcon={hasIcon} type={type}>\n          {title}\n        </ButtonLabel>\n        {tag || null}\n      </ButtonItemStyled>\n    )\n  }\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'propTypes' does not exist on type 'typeo... Remove this comment to see the full error message\nButtonItem.propTypes = {\n  shouldFocus: PropTypes.bool,\n  ariaHaspopup: PropTypes.bool,\n  index: PropTypes.number.isRequired,\n  item: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    disabled: PropTypes.bool,\n    colors: PropTypes.shape({\n      title: PropTypes.string,\n      iconHover: PropTypes.string,\n    }),\n  }).isRequired,\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'defaultProps' does not exist on type 'ty... Remove this comment to see the full error message\nButtonItem.defaultProps = {\n  shouldFocus: false,\n  ariaHaspopup: false,\n}\n"]}