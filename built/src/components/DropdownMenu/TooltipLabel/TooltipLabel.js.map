{"version":3,"file":"TooltipLabel.js","sourceRoot":"","sources":["../../../../../src/components/DropdownMenu/TooltipLabel/TooltipLabel.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,SAAS,MAAM,YAAY,CAAA;AAClC,OAAO,MAAM,MAAM,mBAAmB,CAAA;AAEtC,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG,CAAA;;;;;;;;;;;CAW9B,CAAA;AAED,MAAM,CAAC,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAA;;;;;iBAKd,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;CACtD,CAAA;AAED,MAAM,CAAC,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAAA;;;;;CAKnC,CAAA;AAGD,MAAM,YAAY,GAAG,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,cAAc,EAAE,EAAE,EAAE;IAC3D,IAAI,CAAC,KAAK,IAAI,CAAC,cAAc;QAAE,OAAO,IAAI,CAAA;IAE1C,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAA;IAC/B,MAAM,YAAY,GAAG,UAAU,GAAG,QAAQ,CAAA;IAC1C,MAAM,cAAc,GAAG,UAAU,GAAG,QAAQ,CAAA;IAE5C,OAAO,CACL;QAEG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,CAC7C,oBAAC,YAAY,IAAC,GAAG,EAAE,gBAAgB,KAAK,EAAE;YACvC,IAAI,CAAC,IAAI;YACV,oBAAC,KAAK,IAAC,OAAO,UAAE,IAAI,CAAC,KAAK,CAAS,CACtB,CAChB,CAAC;QACD,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,CACrB,oBAAC,YAAY;YACX,oBAAC,UAAU,QAAE,cAAc,CAAc,CAC5B,CAChB;QACA,YAAY,IAAI,CACf,oBAAC,YAAY;YACX,oBAAC,KAAK,QAAE,QAAQ,cAAc,UAAU,CAAS,CACpC,CAChB,CACA,CACJ,CAAA;AACH,CAAC,CAAA;AAED,YAAY,CAAC,SAAS,GAAG;IAEvB,KAAK,EAAE,SAAS,CAAC,OAAO,CACtB,SAAS,CAAC,KAAK,CAAC;QACd,KAAK,EAAE,SAAS,CAAC,MAAM;QACvB,IAAI,EAAE,SAAS,CAAC,IAAI;KACrB,CAAC,CACH;IACD,cAAc,EAAE,SAAS,CAAC,MAAM;CACjC,CAAA;AAED,YAAY,CAAC,YAAY,GAAG;IAC1B,KAAK,EAAE,EAAE;IACT,cAAc,EAAE,IAAI;CACrB,CAAA;AAED,eAAe,YAAY,CAAA","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst LabelWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  align-content: center;\n  font-size: 13px;\n  height: 14px;\n  line-height: 14px;\n  width: 100%;\n  max-width: 160px;\n  padding-top: 4px;\n  padding-bottom: 4px;\n`\n\nexport const Label = styled.div`\n  width: 127px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-left: ${(props) => (props.hasIcon ? '7px' : 0)};\n`\n\nexport const EmptyLabel = styled.div`\n  white-space: break-spaces;\n  padding-top: 50px;\n  padding-bottom: 50px;\n  height: auto;\n`\n\n// @ts-expect-error TS(7031) FIXME: Binding element 'items' implicitly has an 'any' ty... Remove this comment to see the full error message\nconst TooltipLabel = ({ items, maxItems, defaultMessage }) => {\n  if (!items && !defaultMessage) return null\n\n  const totalItems = items.length\n  const exceedsTotal = totalItems > maxItems\n  const remainingItems = totalItems - maxItems\n\n  return (\n    <>\n      {/* @ts-expect-error TS(7006) FIXME: Parameter 'item' implicitly has an 'any' type. */}\n      {items.slice(0, maxItems).map((item, index) => (\n        <LabelWrapper key={`tooltip-item-${index}`}>\n          {item.icon}\n          <Label hasIcon>{item.title}</Label>\n        </LabelWrapper>\n      ))}\n      {items.length === 0 && (\n        <LabelWrapper>\n          <EmptyLabel>{defaultMessage}</EmptyLabel>\n        </LabelWrapper>\n      )}\n      {exceedsTotal && (\n        <LabelWrapper>\n          <Label>{`Plus ${remainingItems} more...`}</Label>\n        </LabelWrapper>\n      )}\n    </>\n  )\n}\n\nTooltipLabel.propTypes = {\n  /** Items list to display in the tooltip */\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      icon: PropTypes.node,\n    }),\n  ),\n  defaultMessage: PropTypes.string,\n}\n\nTooltipLabel.defaultProps = {\n  items: [],\n  defaultMessage: null,\n}\n\nexport default TooltipLabel\n"]}