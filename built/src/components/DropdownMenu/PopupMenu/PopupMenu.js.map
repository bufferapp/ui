{"version":3,"file":"PopupMenu.js","sourceRoot":"","sources":["../../../../../src/components/DropdownMenu/PopupMenu/PopupMenu.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Item, ItemDividerTitle } from '../style'\nimport { PopupMenuStyled, ItemDivider } from './style'\nimport ButtonItem from '../ButtonItem/ButtonItem'\nimport Tooltip from '../../Tooltip/Tooltip'\nimport { keyCode } from '../keyCode'\nimport TooltipLabel from '../TooltipLabel/TooltipLabel'\n\n// @ts-expect-error TS(7031) FIXME: Binding element 'condition' implicitly has an 'any... Remove this comment to see the full error message\nconst OptionalWrapper = ({ condition, wrapper, children }) =>\n  condition ? wrapper(children) : children\n\nexport default class PopupMenu extends React.Component {\n  // @ts-expect-error TS(7006) FIXME: Parameter 'props' implicitly has an 'any' type.\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      focusedItem: -1,\n      tabIndex: '-1',\n    }\n\n    // @ts-expect-error TS(2551) FIXME: Property 'firstItem' does not exist on type 'Popup... Remove this comment to see the full error message\n    this.firstItem = props.items.length > 0 ? 0 : -1\n    // @ts-expect-error TS(2551) FIXME: Property 'lastItem' does not exist on type 'PopupM... Remove this comment to see the full error message\n    this.lastItem = props.items.length - 1 || -1\n    // @ts-expect-error TS(2339) FIXME: Property 'keyCode' does not exist on type 'PopupMe... Remove this comment to see the full error message\n    this.keyCode = keyCode\n\n    this.handleKeydown = this.handleKeydown.bind(this)\n  }\n\n  componentDidMount() {\n    // @ts-expect-error TS(2339) FIXME: Property 'popup' does not exist on type 'PopupMenu... Remove this comment to see the full error message\n    this.popup.addEventListener('keydown', this.handleKeydown)\n  }\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'prevProps' implicitly has an 'any' type... Remove this comment to see the full error message\n  componentDidUpdate(prevProps) {\n    this.updateIfNeeded(prevProps)\n  }\n\n  componentWillUnmount() {\n    // @ts-expect-error TS(2339) FIXME: Property 'popup' does not exist on type 'PopupMenu... Remove this comment to see the full error message\n    this.popup.removeEventListener('keydown', this.handleKeydown)\n  }\n\n  closePopup = () => {\n    // @ts-expect-error TS(2339) FIXME: Property 'closePopup' does not exist on type 'Read... Remove this comment to see the full error message\n    if (this.props.closePopup) {\n      // @ts-expect-error TS(2339) FIXME: Property 'closePopup' does not exist on type 'Read... Remove this comment to see the full error message\n      this.props.closePopup()\n    }\n    this.setState({ focusedItem: -1 })\n  }\n\n  // @ts-expect-error TS(2339) FIXME: Property 'isOpen' does not exist on type 'Readonly... Remove this comment to see the full error message\n  isPopupOpen = () => this.props.isOpen\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'item' implicitly has an 'any' type.\n  hasSubItems = (item) => item.subItems && item.subItems.length > 0\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'index' implicitly has an 'any' type.\n  isFirstItem = (index) => index === this.firstItem\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'index' implicitly has an 'any' type.\n  isLastItem = (index) => index === this.lastItem\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'index' implicitly has an 'any' type.\n  setFocusToItem = (index) => {\n    this.setState({ focusedItem: index })\n  }\n\n  setFocusToNextItem = () => {\n    // @ts-expect-error TS(2339) FIXME: Property 'focusedItem' does not exist on type 'Rea... Remove this comment to see the full error message\n    const { focusedItem } = this.state\n\n    const newIndex = this.isLastItem(focusedItem)\n      ? // @ts-expect-error TS(2551) FIXME: Property 'firstItem' does not exist on type 'Popup... Remove this comment to see the full error message\n        this.firstItem\n      : focusedItem + 1\n\n    this.setFocusToItem(newIndex)\n  }\n\n  setFocusToPreviousItem = () => {\n    // @ts-expect-error TS(2339) FIXME: Property 'focusedItem' does not exist on type 'Rea... Remove this comment to see the full error message\n    const { focusedItem } = this.state\n\n    const newIndex = this.isFirstItem(focusedItem)\n      ? // @ts-expect-error TS(2551) FIXME: Property 'lastItem' does not exist on type 'PopupM... Remove this comment to see the full error message\n        this.lastItem\n      : focusedItem - 1\n\n    this.setFocusToItem(newIndex)\n  }\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.\n  handleKeydown = (event) => {\n    let flag = false\n    switch (event.keyCode) {\n      // @ts-expect-error TS(2339) FIXME: Property 'keyCode' does not exist on type 'PopupMe... Remove this comment to see the full error message\n      case this.keyCode.DOWN:\n        if (this.isPopupOpen()) {\n          this.setFocusToNextItem()\n        }\n        flag = true\n        break\n      // @ts-expect-error TS(2339) FIXME: Property 'keyCode' does not exist on type 'PopupMe... Remove this comment to see the full error message\n      case this.keyCode.UP:\n        if (this.isPopupOpen()) {\n          this.setFocusToPreviousItem()\n        }\n        flag = true\n        break\n      // @ts-expect-error TS(2339) FIXME: Property 'keyCode' does not exist on type 'PopupMe... Remove this comment to see the full error message\n      case this.keyCode.ESC:\n      // @ts-expect-error TS(2339) FIXME: Property 'keyCode' does not exist on type 'PopupMe... Remove this comment to see the full error message\n      case this.keyCode.TAB:\n        this.closePopup()\n        break\n      default:\n        break\n    }\n\n    if (flag) {\n      event.stopPropagation()\n      event.preventDefault()\n    }\n  }\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'index' implicitly has an 'any' type.\n  focusPopupToItem = (index) => {\n    // @ts-expect-error TS(2339) FIXME: Property 'popup' does not exist on type 'PopupMenu... Remove this comment to see the full error message\n    this.popup.focus()\n    this.setFocusToItem(index)\n  }\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'prevProps' implicitly has an 'any' type... Remove this comment to see the full error message\n  updateIfNeeded(prevProps) {\n    // @ts-expect-error TS(2339) FIXME: Property 'isOpen' does not exist on type 'Readonly... Remove this comment to see the full error message\n    const { isOpen, usingMouse, onOpen } = this.props\n    let newTabIndex = '-1'\n\n    if (prevProps.isOpen !== isOpen) {\n      if (isOpen) {\n        if (usingMouse) newTabIndex = '0'\n        this.focusPopupToItem(0)\n        if (onOpen) {\n          onOpen()\n        }\n      } else {\n        this.setFocusToItem(-1)\n      }\n\n      this.setState({ tabIndex: newTabIndex })\n    }\n  }\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'items' implicitly has an 'any' type.\n  renderItems = (items) => {\n    // @ts-expect-error TS(2339) FIXME: Property 'focusedItem' does not exist on type 'Rea... Remove this comment to see the full error message\n    const { focusedItem } = this.state\n\n    // @ts-expect-error TS(7006) FIXME: Parameter 'item' implicitly has an 'any' type.\n    return items.map((item, index) => {\n      const hasSubItems = this.hasSubItems(item)\n      // @ts-expect-error TS(2339) FIXME: Property 'usingMouse' does not exist on type 'Read... Remove this comment to see the full error message\n      const shouldFocus = index === focusedItem && !this.props.usingMouse\n      const type = index === 0 ? 'header' : ''\n      const { defaultTooltipMessage } = item\n\n      return [\n        item.hasDivider && (\n          <ItemDivider key={`${item.id}--divider`} role=\"none\" type={type}>\n            {item.dividerTitle && (\n              <ItemDividerTitle>{item.dividerTitle}</ItemDividerTitle>\n            )}\n          </ItemDivider>\n        ),\n        <OptionalWrapper\n          key={`item-wrapper-${index}`}\n          condition={hasSubItems || defaultTooltipMessage}\n          // @ts-expect-error TS(7006) FIXME: Parameter 'children' implicitly has an 'any' type.\n          wrapper={(children) => {\n            const tooltip = (\n              <TooltipLabel\n                maxItems={5}\n                items={item.subItems}\n                defaultMessage={defaultTooltipMessage}\n              />\n            )\n            return (\n              <Tooltip\n                // @ts-expect-error TS(2322) FIXME: Type '{ children: any; customLabel: Element; posit... Remove this comment to see the full error message\n                customLabel={tooltip}\n                position=\"left\"\n                verticalAlign=\"top\"\n              >\n                {children}\n              </Tooltip>\n            )\n          }}\n        >\n          <Item key={`item-${index}`} role=\"none\" type={item.type}>\n            <ButtonItem\n              // @ts-expect-error TS(2322) FIXME: Type '{ index: any; item: any; shouldFocus: boolea... Remove this comment to see the full error message\n              index={index}\n              item={item}\n              shouldFocus={shouldFocus}\n              ariaHaspopup={false}\n            />\n          </Item>\n        </OptionalWrapper>,\n      ]\n    })\n  }\n\n  render() {\n    const {\n      // @ts-expect-error TS(2339) FIXME: Property 'ariaLabelPopup' does not exist on type '... Remove this comment to see the full error message\n      ariaLabelPopup,\n      // @ts-expect-error TS(2339) FIXME: Property 'horizontalOffset' does not exist on type... Remove this comment to see the full error message\n      horizontalOffset,\n      // @ts-expect-error TS(2339) FIXME: Property 'items' does not exist on type 'Readonly<... Remove this comment to see the full error message\n      items,\n      // @ts-expect-error TS(2339) FIXME: Property 'isOpen' does not exist on type 'Readonly... Remove this comment to see the full error message\n      isOpen,\n      // @ts-expect-error TS(2339) FIXME: Property 'onBlur' does not exist on type 'Readonly... Remove this comment to see the full error message\n      onBlur,\n      // @ts-expect-error TS(2339) FIXME: Property 'xPosition' does not exist on type 'Reado... Remove this comment to see the full error message\n      xPosition,\n    } = this.props\n\n    return (\n      <PopupMenuStyled\n        // @ts-expect-error TS(7006) FIXME: Parameter 'popup' implicitly has an 'any' type.\n        ref={(popup) => (this.popup = popup)}\n        role=\"menu\"\n        aria-label={ariaLabelPopup}\n        isOpen={isOpen}\n        xPosition={xPosition}\n        horizontalOffset={horizontalOffset}\n        onBlur={onBlur}\n        // @ts-expect-error TS(2339) FIXME: Property 'tabIndex' does not exist on type 'Readon... Remove this comment to see the full error message\n        tabIndex={this.state.tabIndex}\n        // @ts-expect-error TS(7006) FIXME: Parameter 'ev' implicitly has an 'any' type.\n        onKeyDown={(ev) => this.handleKeydown(ev)}\n      >\n        {this.renderItems(items)}\n      </PopupMenuStyled>\n    )\n  }\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'propTypes' does not exist on type 'typeo... Remove this comment to see the full error message\nPopupMenu.propTypes = {\n  /** Boolean to check if the popup is open */\n  isOpen: PropTypes.bool.isRequired,\n\n  /** Additional horizontal space for popup alignment */\n  horizontalOffset: PropTypes.string,\n\n  /** Horizontal alignment to display popup */\n  xPosition: PropTypes.string,\n\n  /** Function that handles onBlur event for popup */\n  onBlur: PropTypes.func.isRequired,\n\n  /** Function that handles closing the popup */\n  closePopup: PropTypes.func.isRequired,\n\n  /** Aria label for popup menu, it should preferibly be the same as the menubarItem name */\n  ariaLabelPopup: PropTypes.string,\n\n  /** Determines if the user is using the mouse to navigate in the menu */\n  usingMouse: PropTypes.bool,\n\n  /** Items list to display in the popup menu */\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      title: PropTypes.string,\n      colors: PropTypes.shape({\n        title: PropTypes.string,\n        iconHover: PropTypes.string,\n      }),\n    }),\n  ).isRequired,\n\n  /** onOpen function to fire when the Dropdown menu is open */\n  onOpen: PropTypes.func,\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'defaultProps' does not exist on type 'ty... Remove this comment to see the full error message\nPopupMenu.defaultProps = {\n  ariaLabelPopup: null,\n  horizontalOffset: null,\n  xPosition: 'left',\n  usingMouse: false,\n  onOpen: null,\n}\n"]}