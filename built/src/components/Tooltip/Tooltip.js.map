{"version":3,"file":"Tooltip.js","sourceRoot":"","sources":["../../../../src/components/Tooltip/Tooltip.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport '@reach/tooltip/styles.css'\nimport * as Styles from './style'\nimport { gray, white } from '../style/colors'\n\nclass Tooltip extends React.Component {\n  // @ts-expect-error TS(7006) FIXME: Parameter 'props' implicitly has an 'any' type.\n  constructor(props) {\n    super(props)\n\n    this.setTooltipPosition = this.setTooltipPosition.bind(this)\n    this.state = {\n      childWidth: 0,\n    }\n  }\n\n  componentDidMount() {\n    this.setTooltipPosition()\n    window.addEventListener('resize', this.setTooltipPosition)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setTooltipPosition)\n  }\n\n  setTooltipPosition() {\n    // Getting the first child width to calculate Tooltip position\n    // @ts-expect-error TS(2339) FIXME: Property 'tooltipWrapper' does not exist on type '... Remove this comment to see the full error message\n    if (this.tooltipWrapper) {\n      // @ts-expect-error TS(2339) FIXME: Property 'tooltipWrapper' does not exist on type '... Remove this comment to see the full error message\n      const childWidth = this.tooltipWrapper.children[0].children[0].getBoundingClientRect()\n        .width\n      this.setState({\n        childWidth,\n      })\n    }\n  }\n\n  /**\n   * Adjusting the styles according to the desired position\n   * The tooltip should be vertically or horizontally centered\n   */\n  // @ts-expect-error TS(7006) FIXME: Parameter 'triggerRect' implicitly has an 'any' ty... Remove this comment to see the full error message\n  getTooltipPosition(triggerRect, tooltipRect, position, verticalAlign) {\n    // @ts-expect-error TS(2339) FIXME: Property 'childWidth' does not exist on type 'Read... Remove this comment to see the full error message\n    const { childWidth } = this.state\n    const gap = 8\n    const triggerCenter = triggerRect.left + childWidth / 2\n    const left = triggerCenter - tooltipRect.width / 2\n    const maxLeft = window.innerWidth - tooltipRect.width - 2\n    const verticalCenter =\n      triggerRect.top +\n      triggerRect.height -\n      (triggerRect.height + tooltipRect.height) / 2 -\n      window.scrollY\n    const verticalTop = triggerRect.top\n    const topPosition = verticalAlign === 'top' ? verticalTop : verticalCenter\n\n    const newPosition = {\n      left: Math.min(Math.max(2, left), maxLeft) + window.scrollX,\n      top: triggerRect.bottom + gap + window.scrollY,\n    }\n\n    switch (position) {\n      case 'top':\n        newPosition.top =\n          triggerRect.top - tooltipRect.height - gap - window.scrollY\n        break\n\n      case 'right':\n        newPosition.left = triggerRect.left + childWidth + gap + window.scrollX\n        newPosition.top = topPosition\n        break\n\n      case 'left':\n        newPosition.left =\n          triggerRect.left - tooltipRect.width - gap - window.scrollX\n        newPosition.top = topPosition\n        break\n\n      default:\n    }\n\n    return newPosition\n  }\n\n  /**\n   * Rendering label with hotkey option if available\n   */\n  // @ts-expect-error TS(7006) FIXME: Parameter 'label' implicitly has an 'any' type.\n  renderLabel = (label, hotkey, customLabel = null) => (\n    <Styles.LabelWrapper>\n      {label && (\n        <Styles.Label color={white}>\n          <Styles.HotkeyWrapper>\n            {label}\n            {hotkey && (\n              <Styles.Label color={gray} isHotkey>\n                {hotkey}\n              </Styles.Label>\n            )}\n          </Styles.HotkeyWrapper>\n        </Styles.Label>\n      )}\n      {customLabel}\n    </Styles.LabelWrapper>\n  )\n\n  render() {\n    const {\n      children,\n      // @ts-expect-error TS(2339) FIXME: Property 'label' does not exist on type 'Readonly<... Remove this comment to see the full error message\n      label,\n      // @ts-expect-error TS(2339) FIXME: Property 'position' does not exist on type 'Readon... Remove this comment to see the full error message\n      position,\n      // @ts-expect-error TS(2339) FIXME: Property 'verticalAlign' does not exist on type 'R... Remove this comment to see the full error message\n      verticalAlign,\n      // @ts-expect-error TS(2339) FIXME: Property 'hotkey' does not exist on type 'Readonly... Remove this comment to see the full error message\n      hotkey,\n      // @ts-expect-error TS(2339) FIXME: Property 'customLabel' does not exist on type 'Rea... Remove this comment to see the full error message\n      customLabel,\n      // @ts-expect-error TS(2339) FIXME: Property 'opacity' does not exist on type 'Readonl... Remove this comment to see the full error message\n      opacity,\n    } = this.props\n\n    const renderTooltip = label || customLabel\n\n    // @todo: remove style from here and use the Styled component\n    // We are currently adding the stylings with the style tag,\n    // instead of the adding it in the Styled component\n    // because we still need to figure out a way to load the css file\n    // properly, and being able to use our customs styles.\n    return (\n      <React.Fragment>\n        {renderTooltip ? (\n          // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.\n          <Styles.TooltipWrapper ref={(node) => (this.tooltipWrapper = node)}>\n            <Styles.TooltipStyled\n              label={this.renderLabel(label, hotkey, customLabel)}\n              // @ts-expect-error TS(7006) FIXME: Parameter 'triggerRect' implicitly has an 'any' ty... Remove this comment to see the full error message\n              position={(triggerRect, tooltipRect) =>\n                this.getTooltipPosition(\n                  triggerRect,\n                  tooltipRect,\n                  position,\n                  verticalAlign,\n                )\n              }\n              style={Styles.TooltipStyle}\n              opacity={opacity}\n            >\n              <div>{children}</div>\n            </Styles.TooltipStyled>\n          </Styles.TooltipWrapper>\n        ) : (\n          <div>{children}</div>\n        )}\n      </React.Fragment>\n    )\n  }\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'propTypes' does not exist on type 'typeo... Remove this comment to see the full error message\nTooltip.propTypes = {\n  /** The component being wrapped */\n  children: PropTypes.node.isRequired,\n\n  /** The tooltip label */\n  label: PropTypes.string,\n\n  /** The tooltip position */\n  position: PropTypes.string,\n\n  /** The tooltip vertical position: this only applies for left and right positioned tooltip */\n  verticalAlign: PropTypes.string,\n\n  /** The tooltip position */\n  hotkey: PropTypes.string,\n\n  /** Custom Label */\n  customLabel: PropTypes.node,\n\n  /** Custom Opacity */\n  opacity: PropTypes.number,\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'defaultProps' does not exist on type 'ty... Remove this comment to see the full error message\nTooltip.defaultProps = {\n  label: '',\n  position: 'bottom',\n  verticalAlign: 'center',\n  hotkey: '',\n  customLabel: '',\n  opacity: 1,\n}\n\nexport default Tooltip\n"]}