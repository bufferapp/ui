import React from 'react';
import PropTypes from 'prop-types';
export declare const ButtonWrapperStyled: any;
export declare const ButtonContainerStyled: any;
export declare const ButtonStyled: any;
declare const Button: {
    ({ disabled, onClick, type, size, label, isSplit, loading, icon, iconEnd, hasIconOnly, isSelect, items, selectPosition, onSelectClick, fullWidth, tooltip, ref, hideSearch, textToLeft, className, children, onOpen, ...props }: {
        [x: string]: any;
        disabled: any;
        onClick: any;
        type: any;
        size: any;
        label: any;
        isSplit: any;
        loading: any;
        icon: any;
        iconEnd: any;
        hasIconOnly: any;
        isSelect: any;
        items: any;
        selectPosition: any;
        onSelectClick: any;
        fullWidth: any;
        tooltip: any;
        ref: any;
        hideSearch: any;
        textToLeft: any;
        className: any;
        children: any;
        onOpen: any;
    }): React.JSX.Element;
    propTypes: {
        disabled: PropTypes.Requireable<boolean>;
        size: PropTypes.Requireable<string>;
        onClick: PropTypes.Validator<(...args: any[]) => any>;
        label: PropTypes.Requireable<string>;
        type: PropTypes.Requireable<string>;
        isSplit: PropTypes.Requireable<boolean>;
        isSelect: PropTypes.Requireable<boolean>;
        loading: PropTypes.Requireable<boolean>;
        hasIconOnly: PropTypes.Requireable<boolean>;
        icon: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        iconEnd: PropTypes.Requireable<boolean>;
        items: PropTypes.Requireable<(PropTypes.InferProps<{
            id: PropTypes.Requireable<string>;
            title: PropTypes.Requireable<string>;
        }> | null | undefined)[]>;
        children: PropTypes.Requireable<PropTypes.ReactElementLike>;
        selectPosition: PropTypes.Requireable<string>;
        onSelectClick: PropTypes.Requireable<(...args: any[]) => any>;
        fullWidth: PropTypes.Requireable<boolean>;
        tooltip: PropTypes.Requireable<string>;
        ref: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        hideSearch: PropTypes.Requireable<boolean>;
        className: PropTypes.Requireable<string>;
        onOpen: PropTypes.Requireable<(...args: any[]) => any>;
    };
    defaultProps: {
        disabled: boolean;
        isSplit: undefined;
        loading: boolean;
        size: string;
        type: string;
        label: undefined;
        hasIconOnly: boolean;
        icon: undefined;
        iconEnd: boolean;
        isSelect: undefined;
        items: undefined;
        selectPosition: string;
        onSelectClick: undefined;
        fullWidth: boolean;
        tooltip: undefined;
        ref: undefined;
        hideSearch: boolean;
        className: undefined;
        children: undefined;
        onOpen: null;
    };
};
export default Button;
//# sourceMappingURL=Button.d.ts.map