{"version":3,"file":"Button.js","sourceRoot":"","sources":["../../../../src/components/Button/Button.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport * as Styles from './style'\nimport ChevronDown from '../Icon/Icons/ChevronDown'\nimport Select from '../Select/Select'\n\n/*\nSince buttons keep their own inline-block display type, we can only imitate this by using a wrapper (with\n `display: inline-block`) an internal container (with `display: flex`), and then the actual contents (including real\n  buttons\n */\n\nexport const ButtonWrapperStyled = styled.div`\n  ${Styles.ButtonWrapperBase};\n  ${(props) =>  \n// @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n Styles[[props.type, props.disabled ? 'Disabled' : ''].join('')]};\n  ${(props) => (props.fullWidth ? Styles.fullWidth : '')};\n`\n\nexport const ButtonContainerStyled = styled.div`\n  ${Styles.ButtonContainerBase};\n`\n\nexport const ButtonStyled = styled.button`\n  ${Styles.ButtonNestedBase};\n  ${(props) =>  \n// @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n Styles[props.size]};\n  ${(props) =>  \n// @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n Styles[props.disabled ? 'disabled' : '']};\n  ${(props) => (props.fullWidth ? Styles.fullWidth : '')};\n`\n\nconst Loading = styled.img`\n  width: 24px;\n  margin-left: 10px;\n`\n\nconst VisuallyHiddenLabel = styled.span`\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n`\n\n/** All buttons, including text and split-buttons, follow the same core principles in dimensions, padding, and font sizes.\n * Combined with simple modifiers, they can be changed in size and appearance.  */\nconst Button = ({\n  // @ts-expect-error TS(7031) FIXME: Binding element 'disabled' implicitly has an 'any'... Remove this comment to see the full error message\n  disabled,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'onClick' implicitly has an 'any' ... Remove this comment to see the full error message\n  onClick,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'type' implicitly has an 'any' typ... Remove this comment to see the full error message\n  type,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'size' implicitly has an 'any' typ... Remove this comment to see the full error message\n  size,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'label' implicitly has an 'any' ty... Remove this comment to see the full error message\n  label,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'isSplit' implicitly has an 'any' ... Remove this comment to see the full error message\n  isSplit,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'loading' implicitly has an 'any' ... Remove this comment to see the full error message\n  loading,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'icon' implicitly has an 'any' typ... Remove this comment to see the full error message\n  icon,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'iconEnd' implicitly has an 'any' ... Remove this comment to see the full error message\n  iconEnd,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'hasIconOnly' implicitly has an 'a... Remove this comment to see the full error message\n  hasIconOnly,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'isSelect' implicitly has an 'any'... Remove this comment to see the full error message\n  isSelect,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'items' implicitly has an 'any' ty... Remove this comment to see the full error message\n  items,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'selectPosition' implicitly has an... Remove this comment to see the full error message\n  selectPosition,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'onSelectClick' implicitly has an ... Remove this comment to see the full error message\n  onSelectClick,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'fullWidth' implicitly has an 'any... Remove this comment to see the full error message\n  fullWidth,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'tooltip' implicitly has an 'any' ... Remove this comment to see the full error message\n  tooltip,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'ref' implicitly has an 'any' type... Remove this comment to see the full error message\n  ref,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'hideSearch' implicitly has an 'an... Remove this comment to see the full error message\n  hideSearch,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'textToLeft' implicitly has an 'an... Remove this comment to see the full error message\n  textToLeft,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'className' implicitly has an 'any... Remove this comment to see the full error message\n  className,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'children' implicitly has an 'any'... Remove this comment to see the full error message\n  children,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'onOpen' implicitly has an 'any' t... Remove this comment to see the full error message\n  onOpen,\n  ...props\n}) => (\n  <ButtonWrapperStyled\n    className={className}\n    disabled={disabled}\n    type={type}\n    fullWidth={fullWidth}\n    $loading={loading}\n  >\n    <ButtonContainerStyled>\n      <ButtonStyled\n        onClick={!disabled ? onClick : undefined}\n        disabled={disabled}\n        isSplit={isSplit}\n        icon={icon}\n        hasIconOnly={hasIconOnly}\n        data-tip={tooltip}\n        ref={ref}\n        aria-haspopup=\"false\"\n        size={size}\n        fullWidth={fullWidth}\n        type={type}\n        {...props}\n      >\n        {!iconEnd && icon}\n        {hasIconOnly && <VisuallyHiddenLabel>{label}</VisuallyHiddenLabel>}\n        {!hasIconOnly && (\n          <Styles.ButtonLabel hasIcon={!!icon} iconEnd={!!iconEnd}>\n            {label}\n          </Styles.ButtonLabel>\n        )}\n        {iconEnd && icon}\n\n        {isSelect && (type === 'primary' || type === 'secondary') && (\n          <Styles.ButtonArrow textToLeft={textToLeft}>\n            <ChevronDown\n              color={type === 'primary' ? 'white' : 'grayDark'}\n              size={size}\n              isChevron\n            />\n          </Styles.ButtonArrow>\n        )}\n\n        {loading && <Loading src=\"./images/loading-gray.svg\" alt=\"loading\" />}\n      </ButtonStyled>\n      {isSplit &&\n        (type === 'primary' || type === 'secondary') &&\n        (children ? (\n          React.Children.map(children, (child) => React.cloneElement(child, {}))\n        ) : (\n          <Select\n            // @ts-expect-error TS(2769) FIXME: No overload matches this call.\n            onSelectClick={onSelectClick}\n            items={items}\n            type={type}\n            size={size}\n            isSplit\n            yPosition={selectPosition}\n            xPosition=\"right\"\n            disabled={disabled}\n            hideSearch={hideSearch}\n            onOpen={onOpen}\n          />\n        ))}\n    </ButtonContainerStyled>\n  </ButtonWrapperStyled>\n)\n\nButton.propTypes = {\n  /** Is the button disabled */\n  disabled: PropTypes.bool,\n\n  /** Size of the Button */\n  size: PropTypes.oneOf(['small', 'large', 'medium']),\n\n  /** OnClick handler */\n  onClick: PropTypes.func.isRequired,\n\n  /** Button label */\n  label: PropTypes.string,\n\n  /** Type of button */\n  type: PropTypes.oneOf([\n    'primary',\n    'secondary',\n    'text',\n    'error',\n    'danger',\n    'orange',\n  ]),\n\n  /** Is the Button Split  */\n  isSplit: PropTypes.bool,\n\n  /** Is this the Select button with chevron */\n  isSelect: PropTypes.bool,\n\n  /** Is the Button Loading  */\n  loading: PropTypes.bool,\n\n  /** Does the button have only an icon and no label */\n  hasIconOnly: PropTypes.bool,\n\n  /** Icon to show with the label */\n  icon: PropTypes.node,\n\n  /** Icon to show with the label */\n  iconEnd: PropTypes.bool,\n\n  /** Items to display in the Split Button popup */\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      title: PropTypes.string,\n    }),\n  ),\n\n  /** Child element(s) to use for custom Split Button child content */\n  children: PropTypes.element,\n\n  /** Position of the Select popup */\n  selectPosition: PropTypes.oneOf(['top', 'bottom']),\n\n  /** Function to call on Split Button selected item click */\n  onSelectClick: PropTypes.func,\n\n  /** Is the button the full width of the parent container */\n  fullWidth: PropTypes.bool,\n\n  /** Tooltip to show on the component */\n  tooltip: PropTypes.string,\n\n  /** The prop to get the DOM element of the Button */\n  ref: PropTypes.node,\n\n  /** Is search hidden */\n  hideSearch: PropTypes.bool,\n\n  /** class passed by the dom element */\n  className: PropTypes.string,\n\n  /** onOpen function to fire when the Dropdown menu is open */\n  onOpen: PropTypes.func,\n}\n\nButton.defaultProps = {\n  disabled: false,\n  isSplit: undefined,\n  loading: false,\n  size: 'medium',\n  type: 'secondary',\n  label: undefined,\n  hasIconOnly: false,\n  icon: undefined,\n  iconEnd: false,\n  isSelect: undefined,\n  items: undefined,\n  selectPosition: 'bottom',\n  onSelectClick: undefined,\n  fullWidth: false,\n  tooltip: undefined,\n  ref: undefined,\n  hideSearch: true,\n  className: undefined,\n  children: undefined,\n  onOpen: null,\n}\n\nexport default Button\n"]}