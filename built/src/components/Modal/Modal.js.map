{"version":3,"file":"Modal.js","sourceRoot":"","sources":["../../../../src/components/Modal/Modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport * as Styles from './style'\nimport Button from '../Button'\nimport { Cross } from '../Icon'\n\n// @ts-expect-error TS(7006) FIXME: Parameter 'cookie' implicitly has an 'any' type.\nfunction setCookie(cookie, cookieKey, days, value) {\n  const expiresInDays = days * 24 * 60 * 60\n  document.cookie = `${cookieKey}=${value}; max-age=${expiresInDays}; ${cookie}`\n}\n\n// @ts-expect-error TS(7006) FIXME: Parameter 'cookie' implicitly has an 'any' type.\nexport function hasDismissedCookie(cookie, cookieKey) {\n  const match = cookie.match(new RegExp(`${cookieKey}=dismissed;*`))\n  if (match) {\n    return true\n  }\n  return false\n}\n\nclass Modal extends React.Component {\n  // @ts-expect-error TS(7006) FIXME: Parameter 'props' implicitly has an 'any' type.\n  constructor(props) {\n    super(props)\n    if (props.cookie) {\n      this.state = {\n        dismissed: hasDismissedCookie(props.cookie.store, props.cookie.store),\n      }\n    }\n  }\n\n  componentDidMount() {\n    // @ts-expect-error TS(2339) FIXME: Property 'ctaButton' does not exist on type 'Modal... Remove this comment to see the full error message\n    if (this.ctaButton) {\n      // @ts-expect-error TS(2339) FIXME: Property 'ctaButton' does not exist on type 'Modal... Remove this comment to see the full error message\n      this.ctaButton.focus()\n    }\n    // @ts-expect-error TS(2339) FIXME: Property 'modal' does not exist on type 'Modal'.\n    if (this.modal) {\n      // @ts-expect-error TS(2339) FIXME: Property 'modal' does not exist on type 'Modal'.\n      this.modal.addEventListener('keydown', this.onKeyDown)\n      // @ts-expect-error TS(2339) FIXME: Property 'modal' does not exist on type 'Modal'.\n      this.modal.focus()\n      // @ts-expect-error TS(2339) FIXME: Property 'closeButton' does not exist on type 'Rea... Remove this comment to see the full error message\n      if (this.props.closeButton) {\n        // @ts-expect-error TS(2339) FIXME: Property 'container' does not exist on type 'Modal... Remove this comment to see the full error message\n        this.container.addEventListener('click', (e) => this.clickToClose(e))\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    // @ts-expect-error TS(2339) FIXME: Property 'modal' does not exist on type 'Modal'.\n    if (this.modal) {\n      // @ts-expect-error TS(2339) FIXME: Property 'modal' does not exist on type 'Modal'.\n      this.modal.removeEventListener('keydown', this.onKeyDown)\n    }\n  }\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.\n  onKeyDown = (event) => {\n    // ESC\n    if (event.which === 27) {\n      event.preventDefault()\n      event.stopPropagation()\n      // @ts-expect-error TS(2339) FIXME: Property 'closeButton' does not exist on type 'Rea... Remove this comment to see the full error message\n      if (this.props.closeButton) {\n        // @ts-expect-error TS(2339) FIXME: Property 'closeButton' does not exist on type 'Rea... Remove this comment to see the full error message\n        this.props.closeButton.callback()\n      }\n      this.dismiss()\n    }\n  }\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'action' implicitly has an 'any' type.\n  validateAction = (action) => {\n    if (action && action.label && action.callback) {\n      return true\n    }\n    return false\n  }\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'action' implicitly has an 'any' type.\n  handleAction(action) {\n    if (action.callback) {\n      action.callback()\n    }\n    // @ts-expect-error TS(2339) FIXME: Property 'dismissible' does not exist on type 'Rea... Remove this comment to see the full error message\n    if (this.props.dismissible) {\n      this.dismiss()\n    }\n  }\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'e' implicitly has an 'any' type.\n  clickToClose(e) {\n    // @ts-expect-error TS(2339) FIXME: Property 'container' does not exist on type 'Modal... Remove this comment to see the full error message\n    if (e.target !== this.container) return\n    // @ts-expect-error TS(2339) FIXME: Property 'closeButton' does not exist on type 'Rea... Remove this comment to see the full error message\n    this.props.closeButton.callback()\n    this.dismiss()\n  }\n\n  /** this must be invoked to properly dismiss the modal */\n  dismiss() {\n    // @ts-expect-error TS(2339) FIXME: Property 'cookie' does not exist on type 'Readonly... Remove this comment to see the full error message\n    const { cookie } = this.props\n    this.setState({ dismissed: true })\n    if (cookie) {\n      setCookie(cookie.store, cookie.key, cookie.days, 'dismissed')\n    }\n    // @ts-expect-error TS(2339) FIXME: Property 'previousFocus' does not exist on type 'R... Remove this comment to see the full error message\n    if (this.props.previousFocus && this.props.previousFocus.current) {\n      // @ts-expect-error TS(2339) FIXME: Property 'previousFocus' does not exist on type 'R... Remove this comment to see the full error message\n      this.props.previousFocus.current.focus()\n    }\n  }\n\n  render() {\n    const {\n      children,\n      // @ts-expect-error TS(2339) FIXME: Property 'background' does not exist on type 'Read... Remove this comment to see the full error message\n      background,\n      // @ts-expect-error TS(2339) FIXME: Property 'action' does not exist on type 'Readonly... Remove this comment to see the full error message\n      action,\n      // @ts-expect-error TS(2339) FIXME: Property 'secondaryAction' does not exist on type ... Remove this comment to see the full error message\n      secondaryAction,\n      // @ts-expect-error TS(2339) FIXME: Property 'footer' does not exist on type 'Readonly... Remove this comment to see the full error message\n      footer,\n      // @ts-expect-error TS(2339) FIXME: Property 'width' does not exist on type 'Readonly<... Remove this comment to see the full error message\n      width,\n      // @ts-expect-error TS(2339) FIXME: Property 'noBackground' does not exist on type 'Re... Remove this comment to see the full error message\n      noBackground,\n      // @ts-expect-error TS(2339) FIXME: Property 'closeButton' does not exist on type 'Rea... Remove this comment to see the full error message\n      closeButton,\n    } = this.props\n\n    // @ts-expect-error TS(2339) FIXME: Property 'dismissed' does not exist on type 'Reado... Remove this comment to see the full error message\n    if (this.state && this.state.dismissed) {\n      return null\n    }\n\n    return (\n      // @ts-expect-error TS(7006) FIXME: Parameter 'container' implicitly has an 'any' type... Remove this comment to see the full error message\n      <Styles.Container ref={(container) => (this.container = container)}>\n        <Styles.Modal\n          background={background}\n          // @ts-expect-error TS(7006) FIXME: Parameter 'modal' implicitly has an 'any' type.\n          ref={(modal) => (this.modal = modal)}\n          width={width}\n          tabIndex=\"0\" // this needs to have a tabIndex so that it can listen for the ESC key\n          noBackground={noBackground}\n        >\n          {closeButton && (\n            <Styles.IconContainer\n              onClick={() => {\n                this.handleAction(closeButton)\n              }}\n              noBackground={noBackground}\n            >\n              <Cross size=\"large\" />\n            </Styles.IconContainer>\n          )}\n          {children}\n          <Styles.Footer background={background}>\n            {footer}\n            {this.validateAction(secondaryAction) && (\n              // @ts-expect-error TS(2740) FIXME: Type '{ type: string; onClick: () => void; disable... Remove this comment to see the full error message\n              <Button\n                type=\"text\"\n                onClick={() => {\n                  this.handleAction(secondaryAction)\n                }}\n                disabled={secondaryAction.disabled}\n                label={secondaryAction.label}\n              />\n            )}\n            {this.validateAction(action) && (\n              // @ts-expect-error TS(2740) FIXME: Type '{ ref: (ctaButton: any) => any; type: any; o... Remove this comment to see the full error message\n              <Button\n                // @ts-expect-error TS(7006) FIXME: Parameter 'ctaButton' implicitly has an 'any' type... Remove this comment to see the full error message\n                ref={(ctaButton) => (this.ctaButton = ctaButton)}\n                type={action.type || 'primary'}\n                onClick={() => {\n                  this.handleAction(action)\n                }}\n                disabled={action.disabled}\n                label={action.label}\n              />\n            )}\n          </Styles.Footer>\n        </Styles.Modal>\n      </Styles.Container>\n    )\n  }\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'propTypes' does not exist on type 'typeo... Remove this comment to see the full error message\nModal.propTypes = {\n  /** The style attribute to apply a background to the modal */\n  background: PropTypes.string,\n  /** The content of the modal */\n  children: PropTypes.node.isRequired,\n  /** The main action settings {**label**: the label of the button,  **disabled** to disable the button, **callback** a callback to invoke on action click, before dismiss, **type** to set the action button type (danger, primary)} */\n  action: PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    disabled: PropTypes.bool,\n    callback: PropTypes.func,\n    type: PropTypes.string,\n  }),\n  /** Verifies if the modal should be dismissed right after the action is executed, in case we are doing a validation inside the modal before closing it */\n  dismissible: PropTypes.bool,\n  /** The secondary action settings {**label**: the label of the button, **disabled** to disable the button, **callback** a callback to invoke on action click, before dismiss */\n  secondaryAction: PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    disabled: PropTypes.bool,\n    callback: PropTypes.func,\n  }),\n  /** The cookie settings if it's omitted the modal won't use cookies {**days**: expire time of the cookie in days, **store**, usually document.cookie, **key**: the key of the cookie} */\n  cookie: PropTypes.shape({\n    days: PropTypes.number,\n    store: PropTypes.string.isRequired,\n    key: PropTypes.string.isRequired,\n  }),\n  footer: PropTypes.node,\n  /** this element will regain focus on modal close */\n  previousFocus: PropTypes.node,\n  /** set a custom modal width, accepts 'wide' as a preset for 730px */\n  width: PropTypes.string,\n  /** remove the background so only the content shows */\n  noBackground: PropTypes.bool,\n  /** adds a close icon, the function to close remains in your app */\n  closeButton: PropTypes.shape({\n    callback: PropTypes.func.isRequired,\n  }),\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'defaultProps' does not exist on type 'ty... Remove this comment to see the full error message\nModal.defaultProps = {\n  background: null,\n  cookie: null,\n  action: null,\n  secondaryAction: null,\n  footer: null,\n  previousFocus: null,\n  dismissible: true,\n  width: null,\n  noBackground: false,\n  closeButton: null,\n}\n\nexport default Modal\n"]}