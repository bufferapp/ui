{"version":3,"file":"Text.js","sourceRoot":"","sources":["../../../../src/components/Text/Text.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AAEzB,OAAO,SAAS,MAAM,YAAY,CAAA;AAClC,OAAO,KAAK,MAAM,MAAM,SAAS,CAAA;AAGjC,MAAM,IAAI,GAAG,CAAC,EAA4B,EAAE,EAAE;QAAhC,EAAE,QAAQ,EAAE,IAAI,OAAY,EAAP,KAAK,cAA1B,oBAA4B,CAAF;IACtC,QAAQ,IAAI,EAAE;QACZ,KAAK,IAAI;YACP,OAAO,oBAAC,MAAM,CAAC,EAAE,oBAAK,KAAK,GAAG,QAAQ,CAAa,CAAA;QACrD,KAAK,IAAI;YACP,OAAO,oBAAC,MAAM,CAAC,EAAE,oBAAK,KAAK,GAAG,QAAQ,CAAa,CAAA;QACrD,KAAK,IAAI;YACP,OAAO,oBAAC,MAAM,CAAC,EAAE,oBAAK,KAAK,GAAG,QAAQ,CAAa,CAAA;QACrD,KAAK,GAAG;YACN,OAAO,oBAAC,MAAM,CAAC,SAAS,oBAAK,KAAK,GAAG,QAAQ,CAAoB,CAAA;QACnE,KAAK,OAAO;YACV,OAAO,oBAAC,MAAM,CAAC,KAAK,oBAAK,KAAK,GAAG,QAAQ,CAAgB,CAAA;QAC3D,KAAK,MAAM;YACT,OAAO,oBAAC,MAAM,CAAC,IAAI,oBAAK,KAAK,GAAG,QAAQ,CAAe,CAAA;QACzD;YACE,OAAO,oBAAC,MAAM,CAAC,IAAI,QAAE,QAAQ,CAAe,CAAA;KAC/C;AACH,CAAC,CAAA;AAED,IAAI,CAAC,SAAS,GAAG;IAEf,QAAQ,EAAE,SAAS,CAAC,IAAI;IAExB,QAAQ,EAAE,SAAS,CAAC,IAAI;IAExB,OAAO,EAAE,SAAS,CAAC,MAAM;IAEzB,KAAK,EAAE,SAAS,CAAC,MAAM;IAEvB,IAAI,EAAE,SAAS,CAAC,MAAM;IAEtB,EAAE,EAAE,SAAS,CAAC,MAAM;CACrB,CAAA;AAED,IAAI,CAAC,YAAY,GAAG;IAClB,QAAQ,EAAE,SAAS;IACnB,QAAQ,EAAE,KAAK;IACf,OAAO,EAAE,SAAS;IAClB,KAAK,EAAE,YAAY;IACnB,IAAI,EAAE,MAAM;CACb,CAAA;AAED,eAAe,IAAI,CAAA","sourcesContent":["import React from 'react'\n\nimport PropTypes from 'prop-types'\nimport * as Styles from './style'\n\n// @ts-expect-error TS(7031) FIXME: Binding element 'children' implicitly has an 'any'... Remove this comment to see the full error message\nconst Text = ({ children, type, ...props }) => {\n  switch (type) {\n    case 'h1':\n      return <Styles.H1 {...props}>{children}</Styles.H1>\n    case 'h2':\n      return <Styles.H2 {...props}>{children}</Styles.H2>\n    case 'h3':\n      return <Styles.H3 {...props}>{children}</Styles.H3>\n    case 'p':\n      return <Styles.Paragraph {...props}>{children}</Styles.Paragraph>\n    case 'label':\n      return <Styles.Label {...props}>{children}</Styles.Label>\n    case 'help':\n      return <Styles.Help {...props}>{children}</Styles.Help>\n    default:\n      return <Styles.Span>{children}</Styles.Span>\n  }\n}\n\nText.propTypes = {\n  /** The actual text content. */\n  children: PropTypes.node,\n  /** It changes the color of the text to red. <br><i>This is only used for `help`</i>. */\n  hasError: PropTypes.bool,\n  /** It's the name of the input it refers to. <br><i>This is only used for `label`.</i> */\n  htmlFor: PropTypes.string,\n  /** The color can be: `white`, `gray`, `grayDark`, `blue` and `red`.<br><i>Not used for `span` and `help`.</i> */\n  color: PropTypes.string,\n  /** The type can be: `h1`, `h2`, `h3`, `p`, `label`, `help`. <br><i>If omitted will return a `span`</i> */\n  type: PropTypes.string,\n  /** If you want to keep all the styling you've applied to a component but just switch out what's being ultimately rendered (be it a different HTML tag or a different custom component), you can use the \"as\" prop to do this at runtime. */\n  as: PropTypes.string,\n}\n\nText.defaultProps = {\n  children: undefined,\n  hasError: false,\n  htmlFor: undefined,\n  color: 'grayDarker',\n  type: 'span',\n}\n\nexport default Text\n"]}