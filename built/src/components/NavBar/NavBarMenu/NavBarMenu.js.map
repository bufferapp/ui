{"version":3,"file":"NavBarMenu.js","sourceRoot":"","sources":["../../../../../src/components/NavBar/NavBarMenu/NavBarMenu.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,SAAS,MAAM,YAAY,CAAA;AAClC,OAAO,EAAE,WAAW,EAAE,MAAM,YAAY,CAAA;AACxC,OAAO,EACL,YAAY,EACZ,WAAW,EACX,UAAU,EACV,UAAU,EACV,YAAY,EACZ,aAAa,EACb,mBAAmB,GACpB,MAAM,SAAS,CAAA;AAGhB,MAAM,UAAU,aAAa,CAAC,IAAI;IAChC,IAAI,IAAI,CAAC,MAAM,EAAE;QACf,OAAO,IAAI,CAAC,MAAM,CAAA;KACnB;IAED,OAAO,uDAAuD,CAAA;AAChE,CAAC;AAKD,MAAM,UAAU,GAAG,CAAC,KAAK,EAAE,EAAE;IAC3B,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,GAAG,KAAK,CAAA;IAEvC,OAAO,CACL,oBAAC,YAAY,oBAAK,KAAK;QACrB,oBAAC,UAAU;YACR,eAAe,IAAI,CAClB,oBAAC,mBAAmB,IAClB,IAAI,EAAE,IAAI,gBACC,8BAA8B,oBAGrB,CACvB;YACD,oBAAC,UAAU,QAAE,IAAI,CAAC,IAAI,CAAc;YACpC,oBAAC,WAAW,QAAE,IAAI,CAAC,KAAK,CAAe,CAC5B;QACb,oBAAC,YAAY,IAAC,MAAM,EAAE,aAAa,CAAC,IAAI,CAAC,GAAI;QAC7C,oBAAC,aAAa;YACZ,oBAAC,WAAW,IAAC,KAAK,EAAC,WAAW,EAAC,IAAI,EAAC,OAAO,GAAG,CAChC,CACH,CAChB,CAAA;AACH,CAAC,CAAA;AAED,UAAU,CAAC,SAAS,GAAG;IAErB,IAAI,EAAE,SAAS,CAAC,KAAK,CAAC;QACpB,IAAI,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;QACjC,KAAK,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;KACnC,CAAC,CAAC,UAAU;IACb,eAAe,EAAE,SAAS,CAAC,IAAI;CAChC,CAAA;AAED,UAAU,CAAC,YAAY,GAAG;IACxB,eAAe,EAAE,KAAK;CACvB,CAAA;AAED,eAAe,UAAU,CAAA","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { ChevronDown } from '../../Icon'\nimport {\n  NavBarStyled,\n  NavBarEmail,\n  NavBarName,\n  NavBarUser,\n  NavBarAvatar,\n  NavBarChavron,\n  NavBarImpersonating,\n} from './style'\n\n// @ts-expect-error TS(7006) FIXME: Parameter 'user' implicitly has an 'any' type.\nexport function getUserAvatar(user) {\n  if (user.avatar) {\n    return user.avatar\n  }\n\n  return 'https://s3.amazonaws.com/buffer-ui/Default+Avatar.png'\n}\n\n/** NavBar Menu component used by the Select component to show a custom User name and avatar\n *  button */\n// @ts-expect-error TS(7006) FIXME: Parameter 'props' implicitly has an 'any' type.\nconst NavBarMenu = (props) => {\n  const { user, isImpersonation } = props\n\n  return (\n    <NavBarStyled {...props}>\n      <NavBarUser>\n        {isImpersonation && (\n          <NavBarImpersonating\n            user={user}\n            aria-label=\"You are impersonating a user\"\n          >\n            Impersonating\n          </NavBarImpersonating>\n        )}\n        <NavBarName>{user.name}</NavBarName>\n        <NavBarEmail>{user.email}</NavBarEmail>\n      </NavBarUser>\n      <NavBarAvatar avatar={getUserAvatar(user)} />\n      <NavBarChavron>\n        <ChevronDown color=\"grayLight\" size=\"large\" />\n      </NavBarChavron>\n    </NavBarStyled>\n  )\n}\n\nNavBarMenu.propTypes = {\n  /** User Name and Email to be shown in the NavBar */\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n  }).isRequired,\n  isImpersonation: PropTypes.bool,\n}\n\nNavBarMenu.defaultProps = {\n  isImpersonation: false,\n}\n\nexport default NavBarMenu\n"]}