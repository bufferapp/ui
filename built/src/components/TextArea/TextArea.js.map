{"version":3,"file":"TextArea.js","sourceRoot":"","sources":["../../../../src/components/TextArea/TextArea.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,SAAS,MAAM,YAAY,CAAA;AAClC,OAAO,IAAI,MAAM,SAAS,CAAA;AAC1B,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAA;AAC1D,OAAO,EAAE,OAAO,EAAE,MAAM,SAAS,CAAA;AACjC,OAAO,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,SAAS,CAAA;AAEnD,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,KAAK,CAAC,SAAS;IACnD,MAAM;QACJ,MAAM,KAsBF,IAAI,CAAC,KAAK,EAtBR,EAEJ,KAAK,EAEL,KAAK,EAEL,QAAQ,EAER,IAAI,EAEJ,QAAQ,EAER,IAAI,EAEJ,QAAQ,EAER,EAAE,EAEF,UAAU,EAEV,UAAU,OAEE,EADT,KAAK,cArBJ,wGAsBL,CAAa,CAAA;QACd,OAAO,CACL,oBAAC,SAAS;YACR,oBAAC,IAAI,IAAC,OAAO,EAAE,EAAE,EAAE,IAAI,EAAC,OAAO,IAC5B,KAAK,CACD;YACP,oBAAC,cAAc,kBACb,EAAE,EAAE,EAAE,IACF,KAAK,IACT,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,QAAQ,EAClB,IAAI,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAC3B,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,QAAQ,EAClB,UAAU,EAAE,UAAU,EACtB,GAAG,EAAE,UAAU,IACf;YACD,QAAQ,IAAI,CACX,oBAAC,eAAe;gBACd,oBAAC,OAAO,IAAC,IAAI,EAAC,QAAQ,GAAG;gBACzB,oBAAC,QAAQ,IAAC,IAAI,EAAC,MAAM,EAAC,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,IAClD,IAAI,CACI,CACK,CACnB,CACS,CACb,CAAA;IACH,CAAC;CACF;AAGD,QAAQ,CAAC,SAAS,GAAG;IAEnB,KAAK,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;IAElC,WAAW,EAAE,SAAS,CAAC,MAAM;IAE7B,QAAQ,EAAE,SAAS,CAAC,IAAI;IAExB,QAAQ,EAAE,SAAS,CAAC,IAAI;IAExB,QAAQ,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;IAEnC,IAAI,EAAE,SAAS,CAAC,MAAM;IAEtB,EAAE,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;IAE/B,UAAU,EAAE,SAAS,CAAC,IAAI;IAK1B,UAAU,EAAE,SAAS,CAAC,SAAS,CAAC;QAC9B,SAAS,CAAC,IAAI;QACd,SAAS,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;KAC5D,CAAC;CACH,CAAA;AAGD,QAAQ,CAAC,YAAY,GAAG;IACtB,WAAW,EAAE,SAAS;IACtB,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,IAAI,EAAE,CAAC;IACP,UAAU,EAAE,KAAK;IACjB,UAAU,EAAE,SAAS;CACtB,CAAA","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Text from '../Text'\nimport { HelpTextWrapper, HelpText } from '../Input/style'\nimport { Warning } from '../Icon'\nimport { Container, StyledTextArea } from './style'\n\nexport default class TextArea extends React.Component {\n  render() {\n    const {\n      // @ts-expect-error TS(2339) FIXME: Property 'value' does not exist on type 'Readonly<... Remove this comment to see the full error message\n      value,\n      // @ts-expect-error TS(2339) FIXME: Property 'label' does not exist on type 'Readonly<... Remove this comment to see the full error message\n      label,\n      // @ts-expect-error TS(2339) FIXME: Property 'hasError' does not exist on type 'Readon... Remove this comment to see the full error message\n      hasError,\n      // @ts-expect-error TS(2339) FIXME: Property 'help' does not exist on type 'Readonly<{... Remove this comment to see the full error message\n      help,\n      // @ts-expect-error TS(2339) FIXME: Property 'disabled' does not exist on type 'Readon... Remove this comment to see the full error message\n      disabled,\n      // @ts-expect-error TS(2339) FIXME: Property 'rows' does not exist on type 'Readonly<{... Remove this comment to see the full error message\n      rows,\n      // @ts-expect-error TS(2339) FIXME: Property 'onChange' does not exist on type 'Readon... Remove this comment to see the full error message\n      onChange,\n      // @ts-expect-error TS(2339) FIXME: Property 'id' does not exist on type 'Readonly<{}>... Remove this comment to see the full error message\n      id,\n      // @ts-expect-error TS(2339) FIXME: Property 'fullHeight' does not exist on type 'Read... Remove this comment to see the full error message\n      fullHeight,\n      // @ts-expect-error TS(2339) FIXME: Property 'forwardRef' does not exist on type 'Read... Remove this comment to see the full error message\n      forwardRef,\n      ...props\n    } = this.props\n    return (\n      <Container>\n        <Text htmlFor={id} type=\"label\">\n          {label}\n        </Text>\n        <StyledTextArea\n          id={id}\n          {...props}\n          hasError={hasError}\n          disabled={disabled}\n          rows={rows > 20 ? 20 : rows}\n          value={value}\n          onChange={onChange}\n          fullHeight={fullHeight}\n          ref={forwardRef}\n        />\n        {hasError && (\n          <HelpTextWrapper>\n            <Warning size=\"medium\" />\n            <HelpText type=\"help\" htmlFor={id} hasError={hasError}>\n              {help}\n            </HelpText>\n          </HelpTextWrapper>\n        )}\n      </Container>\n    )\n  }\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'propTypes' does not exist on type 'typeo... Remove this comment to see the full error message\nTextArea.propTypes = {\n  /** It adds a label on top of the textarea box. */\n  label: PropTypes.string.isRequired,\n  /** It's the placeholder value of the textarea. */\n  placeholder: PropTypes.string,\n  /** It colors the field in red. */\n  hasError: PropTypes.bool,\n  /** It disables the textarea field. */\n  disabled: PropTypes.bool,\n  /** The onChange event */\n  onChange: PropTypes.func.isRequired,\n  /** Number of rows, max 20 */\n  rows: PropTypes.number,\n  /** The id to link the textarea with the label */\n  id: PropTypes.string.isRequired,\n  /** If the textarea should take the height of the parent div */\n  fullHeight: PropTypes.bool,\n  /**\n   * this consumed by the default export that is wrapping the component into a ForwardRef\n   * @ignore\n   */\n  forwardRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n  ]),\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'defaultProps' does not exist on type 'ty... Remove this comment to see the full error message\nTextArea.defaultProps = {\n  placeholder: undefined,\n  hasError: false,\n  disabled: false,\n  rows: 4,\n  fullHeight: false,\n  forwardRef: undefined,\n}\n"]}