{"version":3,"file":"SidebarListItem.js","sourceRoot":"","sources":["../../../../src/components/SidebarListItem/SidebarListItem.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport PropTypes from 'prop-types'\nimport {\n  Badge,\n  BadgeIconContainer,\n  Handle,\n  IconContainer,\n  ItemStyled,\n  LabelContainer,\n  LabelStyled,\n  NameHandleWrapper,\n} from './style'\nimport Avatar from '../Avatar/Avatar'\n\nconst SidebarListItem = ({\n  // @ts-expect-error TS(7031) FIXME: Binding element 'title' implicitly has an 'any' ty... Remove this comment to see the full error message\n  title,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'icon' implicitly has an 'any' typ... Remove this comment to see the full error message\n  icon,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'onItemClick' implicitly has an 'a... Remove this comment to see the full error message\n  onItemClick,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'badges' implicitly has an 'any' t... Remove this comment to see the full error message\n  badges,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'badgeIcon' implicitly has an 'any... Remove this comment to see the full error message\n  badgeIcon,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'selected' implicitly has an 'any'... Remove this comment to see the full error message\n  selected,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'user' implicitly has an 'any' typ... Remove this comment to see the full error message\n  user,\n  // @ts-expect-error TS(7031) FIXME: Binding element 'className' implicitly has an 'any... Remove this comment to see the full error message\n  className,\n}) => (\n  <ItemStyled\n    onClick={() => onItemClick()}\n    hasUser={user}\n    selected={selected}\n    className={className}\n  >\n    {icon && <IconContainer selected={selected}>{icon}</IconContainer>}\n    <LabelContainer>\n      {user ? (\n        <React.Fragment>\n          <Avatar\n            src={user.profileImageUrl}\n            fallbackUrl={user.fallbackUrl}\n            alt={user.name}\n            size=\"small\"\n            type=\"social\"\n            network={user.network}\n          />\n          <NameHandleWrapper>\n            <LabelStyled\n              type=\"label\"\n              title={title}\n              hasUser={user}\n              selected={selected}\n            >\n              {user.name}\n            </LabelStyled>\n            <Handle selected={selected}>{user.handle}</Handle>\n          </NameHandleWrapper>\n        </React.Fragment>\n      ) : (\n        <LabelStyled type=\"label\" title={title} selected={selected}>\n          {title}\n        </LabelStyled>\n      )}\n    </LabelContainer>\n\n    {!badgeIcon && badges && <Badge selected={selected}>{badges}</Badge>}\n    {badgeIcon && (\n      <BadgeIconContainer selected={selected}>{badgeIcon}</BadgeIconContainer>\n    )}\n  </ItemStyled>\n)\n\nSidebarListItem.propTypes = {\n  /** The id of the element */\n  id: PropTypes.string,\n  /** The className of the element */\n  className: PropTypes.string,\n  /** What the label will say */\n  title: PropTypes.string.isRequired,\n  /** An icon either from this library or a node of your choice */\n  icon: PropTypes.node,\n  /** A function to perform when the item is clicked */\n  onItemClick: PropTypes.func.isRequired,\n  /** A string or Node to display at the far right side of the item */\n  badges: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  /** An icon either from this library or a node of your choice */\n  badgeIcon: PropTypes.node,\n  /** Whether the item is currently selected */\n  selected: PropTypes.bool,\n  /** A user object if you'd like the item to display the user Avatar, social network and handle */\n  user: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    handle: PropTypes.string,\n    profileImageUrl: PropTypes.string,\n    fallbackUrl: PropTypes.string,\n    network: PropTypes.oneOf([\n      'facebook',\n      'twitter',\n      'instagram',\n      'linkedin',\n      'google',\n      'pinterest',\n      'tiktok',\n      'googlebusiness',\n      'startPage',\n      'mastodon',\n      'youtube',\n    ]),\n  }),\n}\n\nSidebarListItem.defaultProps = {\n  id: '',\n  icon: null,\n  badgeIcon: null,\n  badges: null,\n  selected: null,\n  user: null,\n  className: null,\n}\n\nexport default SidebarListItem\n"]}