{"version":3,"file":"Notification.js","sourceRoot":"","sources":["../../../../src/components/Notification/Notification.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,SAAS,MAAM,YAAY,CAAA;AAClC,OAAO,EACL,SAAS,EACT,IAAI,EACJ,IAAI,EACJ,OAAO,EACP,UAAU,EACV,YAAY,GACb,MAAM,SAAS,CAAA;AAChB,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAA;AAClD,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,qBAAqB,CAAA;AAGzD,SAAS,YAAY,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,eAAe,EAAE;IACpE,MAAM,EACJ,gBAAgB,EAChB,OAAO,EAAE,uBAAuB,EAChC,cAAc,GACf,GAAG,YAAY,CAAC;QACf,OAAO,EAAE,UAAU;QACnB,gBAAgB,EAAE,UAAU;QAC5B,iBAAiB,EAAE,OAAO;QAC1B,SAAS,EAAE,OAAO;KACnB,CAAC,CAAA;IAEF,OAAO,CACL,oBAAC,gBAAgB,oBAAK,cAAc;QAClC,oBAAC,SAAS;YACR,oBAAC,OAAO;gBACN,oBAAC,IAAI,QAAE,IAAI,CAAQ;gBACnB,oBAAC,IAAI,IAAC,OAAO,EAAE,GAAG,EAAE,CAAC,uBAAuB,EAAE,GAAI,CAC1C;YACT,IAAI,KAAK,QAAQ,IAAI,CACpB,oBAAC,UAAU;gBACR,MAAM,IAAI,CACT,oBAAC,YAAY,IACX,OAAO,EAAE,MAAM,CAAC,QAAQ,EACxB,KAAK,EAAE,MAAM,CAAC,KAAK,EACnB,IAAI,EAAC,MAAM,GACX,CACH;gBACA,eAAe,IAAI,CAClB,oBAAC,YAAY,IACX,OAAO,EAAE,eAAe,CAAC,QAAQ,EACjC,KAAK,EAAE,eAAe,CAAC,KAAK,EAC5B,IAAI,EAAC,MAAM,GACX,CACH,CACU,CACd,CACS,CACK,CACpB,CAAA;AACH,CAAC;AAED,YAAY,CAAC,SAAS,GAAG;IAEvB,IAAI,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;IAGjC,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;IAGlC,IAAI,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAGzC,MAAM,EAAE,SAAS,CAAC,KAAK,CAAC;QACtB,KAAK,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;QAClC,QAAQ,EAAE,SAAS,CAAC,IAAI;QACxB,QAAQ,EAAE,SAAS,CAAC,IAAI;KACzB,CAAC;IAEF,eAAe,EAAE,SAAS,CAAC,KAAK,CAAC;QAC/B,KAAK,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;QAClC,QAAQ,EAAE,SAAS,CAAC,IAAI;QACxB,QAAQ,EAAE,SAAS,CAAC,IAAI;KACzB,CAAC;CACH,CAAA;AAED,YAAY,CAAC,YAAY,GAAG;IAC1B,IAAI,EAAE,MAAM;IACZ,MAAM,EAAE,SAAS;IACjB,eAAe,EAAE,SAAS;CAC3B,CAAA;AAED,eAAe,YAAY,CAAA","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Container,\n  Text,\n  Icon,\n  TextRow,\n  ButtonsRow,\n  ButtonStyled,\n} from './style'\nimport { useAnimation } from '../AnimationWrapper'\nimport { stageInTop, fadeOut } from '../style/animations'\n\n// @ts-expect-error TS(7031) FIXME: Binding element 'text' implicitly has an 'any' typ... Remove this comment to see the full error message\nfunction Notification({ text, onClose, type, action, secondaryAction }) {\n  const {\n    AnimationWrapper,\n    dismiss: dismissAnimationWrapper,\n    animationProps,\n  } = useAnimation({\n    justify: 'flex-end',\n    stageInAnimation: stageInTop,\n    stageOutAnimation: fadeOut,\n    onDismiss: onClose,\n  })\n\n  return (\n    <AnimationWrapper {...animationProps}>\n      <Container>\n        <TextRow>\n          <Text>{text}</Text>\n          <Icon onClick={() => dismissAnimationWrapper()} />\n        </TextRow>\n        {type === 'action' && (\n          <ButtonsRow>\n            {action && (\n              <ButtonStyled\n                onClick={action.callback}\n                label={action.label}\n                type=\"text\"\n              />\n            )}\n            {secondaryAction && (\n              <ButtonStyled\n                onClick={secondaryAction.callback}\n                label={secondaryAction.label}\n                type=\"text\"\n              />\n            )}\n          </ButtonsRow>\n        )}\n      </Container>\n    </AnimationWrapper>\n  )\n}\n\nNotification.propTypes = {\n  /** Text of the notification */\n  text: PropTypes.string.isRequired,\n\n  /** Callback function to execute when the notification closes */\n  onClose: PropTypes.func.isRequired,\n\n  /** Type of the notification */\n  type: PropTypes.oneOf(['action', 'text']),\n\n  /** The main action settings {**label**: the label of the button,  **disabled** to disable the button, **callback** a callback to invoke on action click, before dismiss */\n  action: PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    disabled: PropTypes.bool,\n    callback: PropTypes.func,\n  }),\n  /** The secondary action settings {**label**: the label of the button, **disabled** to disable the button, **callback** a callback to invoke on action click, before dismiss */\n  secondaryAction: PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    disabled: PropTypes.bool,\n    callback: PropTypes.func,\n  }),\n}\n\nNotification.defaultProps = {\n  type: 'text',\n  action: undefined,\n  secondaryAction: undefined,\n}\n\nexport default Notification\n"]}