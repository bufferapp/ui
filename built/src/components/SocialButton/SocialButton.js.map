{"version":3,"file":"SocialButton.js","sourceRoot":"","sources":["../../../../src/components/SocialButton/SocialButton.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,SAAS,MAAM,YAAY,CAAA;AAClC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAA;AAC3E,OAAO,IAAI,MAAM,cAAc,CAAA;AAE/B,OAAO,EAAE,0BAA0B,EAAE,kBAAkB,EAAE,MAAM,SAAS,CAAA;AAGxE,MAAM,aAAa,GAAG,CAAC,OAAO,EAAE,EAAE;IAChC,MAAM,OAAO,GAAG,EAAE,CAAA;IAClB,QAAQ,OAAO,EAAE;QACf,KAAK,WAAW;YAEd,OAAO,CAAC,IAAI,GAAG,oBAAC,SAAS,OAAG,CAAA;YAE5B,OAAO,CAAC,IAAI,GAAG,WAAW,CAAA;YAE1B,OAAO,CAAC,GAAG,GAAG,uCAAuC,CAAA;YACrD,MAAK;QACP,KAAK,SAAS;YAEZ,OAAO,CAAC,IAAI,GAAG,oBAAC,OAAO,OAAG,CAAA;YAE1B,OAAO,CAAC,IAAI,GAAG,SAAS,CAAA;YAExB,OAAO,CAAC,GAAG,GAAG,2BAA2B,CAAA;YACzC,MAAK;QACP,KAAK,UAAU;YAEb,OAAO,CAAC,IAAI,GAAG,oBAAC,QAAQ,OAAG,CAAA;YAE3B,OAAO,CAAC,IAAI,GAAG,UAAU,CAAA;YAEzB,OAAO,CAAC,GAAG,GAAG,yBAAyB,CAAA;YACvC,MAAK;QACP,KAAK,WAAW;YAEd,OAAO,CAAC,IAAI,GAAG,oBAAC,SAAS,OAAG,CAAA;YAE5B,OAAO,CAAC,IAAI,GAAG,WAAW,CAAA;YAE1B,OAAO,CAAC,GAAG,GAAG,6BAA6B,CAAA;YAC3C,MAAK;QACP,KAAK,UAAU;YAEb,OAAO,CAAC,IAAI,GAAG,oBAAC,QAAQ,OAAG,CAAA;YAE3B,OAAO,CAAC,IAAI,GAAG,UAAU,CAAA;YAEzB,OAAO,CAAC,GAAG,GAAG,4BAA4B,CAAA;YAC1C,MAAK;QACP;YACE,MAAK;KACR;IACD,OAAO,OAAO,CAAA;AAChB,CAAC,CAAA;AAGD,MAAM,YAAY,GAAG,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE;IACtD,MAAM,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC,CAAA;IACtC,OAAO,CACL,oBAAC,kBAAkB,IACjB,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EACxC,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,QAAQ;QAElB,oBAAC,0BAA0B;YAExB,OAAO,CAAC,IAAI;YAEb,oBAAC,IAAI,IAAC,IAAI,EAAC,GAAG,IAAE,OAAO,CAAC,IAAI,CAAQ,CACT;QAE7B,oBAAC,IAAI,IAAC,IAAI,EAAC,GAAG,IAAE,OAAO,CAAC,GAAG,CAAQ,CAChB,CACtB,CAAA;AACH,CAAC,CAAA;AAED,YAAY,CAAC,SAAS,GAAG;IAEvB,QAAQ,EAAE,SAAS,CAAC,IAAI;IAExB,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC;QACvB,SAAS;QACT,WAAW;QACX,UAAU;QACV,WAAW;QACX,UAAU;KACX,CAAC,CAAC,UAAU;IAEb,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;CACnC,CAAA;AAED,YAAY,CAAC,YAAY,GAAG;IAC1B,QAAQ,EAAE,KAAK;CAChB,CAAA;AAED,eAAe,YAAY,CAAA","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Twitter, Instagram, Facebook, Pinterest, LinkedIn } from '../Icon'\nimport Text from '../Text/Text'\n\nimport { ChannelIconContainerStyled, SocialButtonStyled } from './style'\n\n// @ts-expect-error TS(7006) FIXME: Parameter 'channel' implicitly has an 'any' type.\nconst renderContent = (channel) => {\n  const content = {}\n  switch (channel) {\n    case 'instagram':\n      // @ts-expect-error TS(2339) FIXME: Property 'Icon' does not exist on type '{}'.\n      content.Icon = <Instagram />\n      // @ts-expect-error TS(2339) FIXME: Property 'name' does not exist on type '{}'.\n      content.name = 'Instagram'\n      // @ts-expect-error TS(2339) FIXME: Property 'cta' does not exist on type '{}'.\n      content.cta = 'Connect an Instagram business account'\n      break\n    case 'twitter':\n      // @ts-expect-error TS(2339) FIXME: Property 'Icon' does not exist on type '{}'.\n      content.Icon = <Twitter />\n      // @ts-expect-error TS(2339) FIXME: Property 'name' does not exist on type '{}'.\n      content.name = 'Twitter'\n      // @ts-expect-error TS(2339) FIXME: Property 'cta' does not exist on type '{}'.\n      content.cta = 'Connect a Twitter profile'\n      break\n    case 'facebook':\n      // @ts-expect-error TS(2339) FIXME: Property 'Icon' does not exist on type '{}'.\n      content.Icon = <Facebook />\n      // @ts-expect-error TS(2339) FIXME: Property 'name' does not exist on type '{}'.\n      content.name = 'Facebook'\n      // @ts-expect-error TS(2339) FIXME: Property 'cta' does not exist on type '{}'.\n      content.cta = 'Connect a Facebook page'\n      break\n    case 'pinterest':\n      // @ts-expect-error TS(2339) FIXME: Property 'Icon' does not exist on type '{}'.\n      content.Icon = <Pinterest />\n      // @ts-expect-error TS(2339) FIXME: Property 'name' does not exist on type '{}'.\n      content.name = 'Pinterest'\n      // @ts-expect-error TS(2339) FIXME: Property 'cta' does not exist on type '{}'.\n      content.cta = 'Connect a Pinterest profile'\n      break\n    case 'linkedin':\n      // @ts-expect-error TS(2339) FIXME: Property 'Icon' does not exist on type '{}'.\n      content.Icon = <LinkedIn />\n      // @ts-expect-error TS(2339) FIXME: Property 'name' does not exist on type '{}'.\n      content.name = 'LinkedIn'\n      // @ts-expect-error TS(2339) FIXME: Property 'cta' does not exist on type '{}'.\n      content.cta = 'Connect a LinkedIn profile'\n      break\n    default:\n      break\n  }\n  return content\n}\n\n// @ts-expect-error TS(7031) FIXME: Binding element 'disabled' implicitly has an 'any'... Remove this comment to see the full error message\nconst SocialButton = ({ disabled, channel, onClick }) => {\n  const content = renderContent(channel)\n  return (\n    <SocialButtonStyled\n      onClick={!disabled ? onClick : undefined}\n      channel={channel}\n      disabled={disabled}\n    >\n      <ChannelIconContainerStyled>\n        {/* @ts-expect-error TS(2339) FIXME: Property 'Icon' does not exist on type '{}'. */}\n        {content.Icon}\n        {/* @ts-expect-error TS(2339) FIXME: Property 'name' does not exist on type '{}'. */}\n        <Text type=\"p\">{content.name}</Text>\n      </ChannelIconContainerStyled>\n      {/* @ts-expect-error TS(2339) FIXME: Property 'cta' does not exist on type '{}'. */}\n      <Text type=\"p\">{content.cta}</Text>\n    </SocialButtonStyled>\n  )\n}\n\nSocialButton.propTypes = {\n  /** Is the button disabled */\n  disabled: PropTypes.bool,\n  /** Channel */\n  channel: PropTypes.oneOf([\n    'twitter',\n    'instagram',\n    'facebook',\n    'pinterest',\n    'linkedin',\n  ]).isRequired,\n  /** OnClick handler */\n  onClick: PropTypes.func.isRequired,\n}\n\nSocialButton.defaultProps = {\n  disabled: false,\n}\n\nexport default SocialButton\n"]}