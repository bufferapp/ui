{"version":3,"file":"Input.js","sourceRoot":"","sources":["../../../../src/components/Input/Input.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport PropTypes from 'prop-types'\nimport * as Styles from './style'\nimport { Warning } from '../Icon'\nimport Text from '../Text'\n\nexport default class Input extends React.Component {\n  render() {\n    const {\n      // @ts-expect-error TS(2339) FIXME: Property 'disabled' does not exist on type 'Readon... Remove this comment to see the full error message\n      disabled,\n      // @ts-expect-error TS(2339) FIXME: Property 'hasError' does not exist on type 'Readon... Remove this comment to see the full error message\n      hasError,\n      // @ts-expect-error TS(2339) FIXME: Property 'help' does not exist on type 'Readonly<{... Remove this comment to see the full error message\n      help,\n      // @ts-expect-error TS(2339) FIXME: Property 'label' does not exist on type 'Readonly<... Remove this comment to see the full error message\n      label,\n      // @ts-expect-error TS(2339) FIXME: Property 'maxLength' does not exist on type 'Reado... Remove this comment to see the full error message\n      maxLength,\n      // @ts-expect-error TS(2339) FIXME: Property 'id' does not exist on type 'Readonly<{}>... Remove this comment to see the full error message\n      id,\n      // @ts-expect-error TS(2339) FIXME: Property 'name' does not exist on type 'Readonly<{... Remove this comment to see the full error message\n      name,\n      // @ts-expect-error TS(2339) FIXME: Property 'onChange' does not exist on type 'Readon... Remove this comment to see the full error message\n      onChange,\n      // @ts-expect-error TS(2339) FIXME: Property 'onBlur' does not exist on type 'Readonly... Remove this comment to see the full error message\n      onBlur,\n      // @ts-expect-error TS(2339) FIXME: Property 'onKeyUp' does not exist on type 'Readonl... Remove this comment to see the full error message\n      onKeyUp,\n      // @ts-expect-error TS(2339) FIXME: Property 'prefix' does not exist on type 'Readonly... Remove this comment to see the full error message\n      prefix,\n      // @ts-expect-error TS(2339) FIXME: Property 'placeholder' does not exist on type 'Rea... Remove this comment to see the full error message\n      placeholder,\n      // @ts-expect-error TS(2339) FIXME: Property 'size' does not exist on type 'Readonly<{... Remove this comment to see the full error message\n      size,\n      // @ts-expect-error TS(2339) FIXME: Property 'type' does not exist on type 'Readonly<{... Remove this comment to see the full error message\n      type,\n      // @ts-expect-error TS(2339) FIXME: Property 'value' does not exist on type 'Readonly<... Remove this comment to see the full error message\n      value,\n      // @ts-expect-error TS(2339) FIXME: Property 'forwardedRef' does not exist on type 'Re... Remove this comment to see the full error message\n      forwardedRef,\n      // @ts-expect-error TS(2339) FIXME: Property 'required' does not exist on type 'Readon... Remove this comment to see the full error message\n      required,\n      // @ts-expect-error TS(2339) FIXME: Property 'icon' does not exist on type 'Readonly<{... Remove this comment to see the full error message\n      icon,\n    } = this.props\n    return (\n      <Styles.InputWrapper>\n        {label.length > 0 && (\n          <Text htmlFor={id} type=\"label\">\n            {label}\n          </Text>\n        )}\n        <Styles.InputFieldWrapper prefix={prefix} size={size}>\n          {icon && !prefix && <Styles.StyledIcon>{icon}</Styles.StyledIcon>}\n          <Styles.InputStyled\n            disabled={disabled}\n            hasError={hasError}\n            maxLength={maxLength}\n            id={id}\n            name={name}\n            onChange={onChange}\n            onBlur={onBlur}\n            onKeyUp={onKeyUp}\n            prefix={prefix}\n            placeholder={placeholder}\n            type={type}\n            size={size}\n            value={value}\n            ref={forwardedRef}\n            required={required}\n            aria-required={required ? true : undefined}\n            icon={icon}\n          />\n        </Styles.InputFieldWrapper>\n        {help.length > 0 && (\n          <Styles.HelpTextWrapper>\n            {hasError && <Warning size=\"medium\" />}\n            <Styles.HelpText type=\"help\" htmlFor={name} hasError={hasError}>\n              {help}\n            </Styles.HelpText>\n          </Styles.HelpTextWrapper>\n        )}\n      </Styles.InputWrapper>\n    )\n  }\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'propTypes' does not exist on type 'typeo... Remove this comment to see the full error message\nInput.propTypes = {\n  /** It disables the input field. </i> */\n  disabled: PropTypes.bool,\n  /** It colors the field in red. */\n  hasError: PropTypes.bool,\n  /** Marks the input as required */\n  required: PropTypes.bool,\n  /** It adds an help text below the input box. */\n  help: PropTypes.string,\n  /** Id to link label with input for a11y */\n  id: PropTypes.string,\n  /** It adds a label on top of the input box. Make sure you also add an id for a11y */\n  label: PropTypes.string,\n  /** It adds a maxlength option for the input. */\n  maxLength: PropTypes.string,\n  /** It's the name of the input. */\n  name: PropTypes.string.isRequired,\n  /** It's the placeholder value of the input. */\n  placeholder: PropTypes.string,\n  /** Optional object describing fixed text that is placed inside the input, format is `{ text: '@', paddingLeft: '30px' }` */\n  prefix: PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    paddingLeft: PropTypes.string.isRequired,\n  }),\n  /** The onChange event */\n  onChange: PropTypes.func.isRequired,\n  /** The onBlur event */\n  onBlur: PropTypes.func,\n  /** The onKeyUp event */\n  onKeyUp: PropTypes.func,\n  /** This is the vertical size of the input field, can be `small`, `regular`, or `tall` */\n  size: PropTypes.string,\n  /** The type of the input */\n  type: PropTypes.string,\n  /** The value of the input */\n  value: PropTypes.string,\n  /** The value of the icon */\n  icon: PropTypes.node,\n  /**\n   * this consumed by the default export that is wrapping the component into a ForwardRef\n   * @ignore\n   */\n  forwardedRef: PropTypes.shape({ current: PropTypes.any }),\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'defaultProps' does not exist on type 'ty... Remove this comment to see the full error message\nInput.defaultProps = {\n  disabled: false,\n  hasError: false,\n  required: false,\n  help: '',\n  id: '',\n  label: '',\n  placeholder: '',\n  size: 'regular',\n  type: 'text',\n  value: undefined,\n  onBlur: () => {},\n  onKeyUp: () => {},\n  forwardedRef: undefined,\n  prefix: null,\n  maxLength: undefined,\n  icon: undefined,\n}\n"]}