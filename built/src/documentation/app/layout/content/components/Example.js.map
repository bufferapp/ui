{"version":3,"file":"Example.js","sourceRoot":"","sources":["../../../../../../../src/documentation/app/layout/content/components/Example.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,SAAS,MAAM,YAAY,CAAA;AAClC,OAAO,MAAM,MAAM,mBAAmB,CAAA;AACtC,OAAO,WAAW,MAAM,eAAe,CAAA;AAEvC,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAA;;;;;;;;;;;;CAYzB,CAAA;AAED,MAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAA;;;;;;;;;CAS1B,CAAA;AAED,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAA;;;;;;;CAOvB,CAAA;AAGD,MAAM,CAAC,OAAO,OAAO,OAAQ,SAAQ,KAAK,CAAC,SAAS;IAElD,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAA;QAOd,eAAU,GAAG,CAAC,KAAK,EAAE,EAAE;YACrB,KAAK,CAAC,cAAc,EAAE,CAAA;YAEtB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAA;YAC/B,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAA;QACxC,CAAC,CAAA;QAXC,IAAI,CAAC,KAAK,GAAG;YACX,QAAQ,EAAE,KAAK;SAChB,CAAA;IACH,CAAC;IAUD,MAAM;QAEJ,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAA;QAE/B,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,KAAK,CAAA;QACzD,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,OAAO,CAAA;QAClD,MAAM,QAAQ,GAAG,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;QAKhD,MAAM,gBAAgB,GAAG,KAAK;YAC5B,CAAC,CAAC,OAAO,CAAC,wBAAwB,QAAQ,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO;YACtE,CAAC,CAAC,OAAO,CAAC,wBAAwB,QAAQ,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,CAAA;QAE/D,IAAI,UAAU,EAAE;YACd,OAAO,oBAAC,gBAAgB,OAAG,CAAA;SAC5B;QAED,OAAO,CACL,oBAAC,OAAO;YACN;gBACG,WAAW,IAAI,oBAAC,KAAK,QAAE,WAAW,CAAS;gBAC5C,oBAAC,gBAAgB,OAAG,CAChB;YACN,oBAAC,UAAU,IAAC,OAAO,EAAE,IAAI,CAAC,UAAU;gBACjC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO;uBAElB;YACZ,QAAQ,IAAI,oBAAC,WAAW,QAAE,IAAI,CAAe,CACtC,CACX,CAAA;IACH,CAAC;CACF;AAGD,OAAO,CAAC,SAAS,GAAG;IAClB,UAAU,EAAE,SAAS,CAAC,IAAI;IAC1B,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC;QACvB,IAAI,EAAE,SAAS,CAAC,MAAM;QACtB,WAAW,EAAE,SAAS,CAAC,MAAM;QAC7B,IAAI,EAAE,SAAS,CAAC,MAAM;KACvB,CAAC,CAAC,UAAU;IACb,aAAa,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;CAC3C,CAAA;AAGD,OAAO,CAAC,YAAY,GAAG;IACrB,UAAU,EAAE,KAAK;CAClB,CAAA","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport CodeExample from './CodeExample'\n\nconst Wrapper = styled.div`\n  padding: 5px 25px;\n  background: #f6f7f9;\n  border: 1px solid #e6ecf1;\n  border-radius: 2px;\n  margin-bottom: 20px;\n  min-width: 40%;\n  flex: 1;\n  margin-right: 20px;\n  min-height: 135px;\n  max-width: 800px;\n  border-top: 1px solid #f3f3f3;\n`\n\nconst CodeButton = styled.a`\n  color: #2c4bff;\n  padding-top: 10px;\n  font-size: 12px;\n  display: flex;\n  justify-content: end;\n  cursor: pointer;\n  font-weight: 500;\n  margin-bottom: 15px;\n`\n\nconst Title = styled.div`\n  font-size: 16px;\n  font-weight: 600;\n  margin-block-start: 1.33em;\n  margin-block-end: 1.33em;\n  margin-inline-start: 0px;\n  margin-inline-end: 0px;\n`\n\n/** Displays components example information */\nexport default class Example extends React.Component {\n  // @ts-expect-error TS(7006) FIXME: Parameter 'props' implicitly has an 'any' type.\n  constructor(props) {\n    super(props)\n    this.state = {\n      showCode: false,\n    }\n  }\n\n  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.\n  toggleCode = (event) => {\n    event.preventDefault()\n    // @ts-expect-error TS(2339) FIXME: Property 'showCode' does not exist on type 'Readon... Remove this comment to see the full error message\n    const { showCode } = this.state\n    this.setState({ showCode: !showCode })\n  }\n\n  render() {\n    // @ts-expect-error TS(2339) FIXME: Property 'showCode' does not exist on type 'Readon... Remove this comment to see the full error message\n    const { showCode } = this.state\n    // @ts-expect-error TS(2339) FIXME: Property 'example' does not exist on type 'Readonl... Remove this comment to see the full error message\n    const { example, componentName, fullscreen } = this.props\n    const { code, description, title, name } = example\n    const fileName = componentName.replace(/ /g, '') // makes sure to replace all whitespaces\n\n    // Must use CommonJS require here to dynamically require components\n    // if we have the example title, that means that the example is located in a subfolder\n    // so we need to include that title/folder in our path\n    const ExampleComponent = title\n      ? require(`../../../../examples/${fileName}/${title}/${name}`).default\n      : require(`../../../../examples/${fileName}/${name}`).default\n\n    if (fullscreen) {\n      return <ExampleComponent />\n    }\n\n    return (\n      <Wrapper>\n        <div>\n          {description && <Title>{description}</Title>}\n          <ExampleComponent />\n        </div>\n        <CodeButton onClick={this.toggleCode}>\n          {showCode ? 'Hide ' : 'Show '}\n          Code\n        </CodeButton>\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </Wrapper>\n    )\n  }\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'propTypes' does not exist on type 'typeo... Remove this comment to see the full error message\nExample.propTypes = {\n  fullscreen: PropTypes.bool,\n  example: PropTypes.shape({\n    code: PropTypes.string,\n    description: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n  componentName: PropTypes.string.isRequired,\n}\n\n// @ts-expect-error TS(2339) FIXME: Property 'defaultProps' does not exist on type 'ty... Remove this comment to see the full error message\nExample.defaultProps = {\n  fullscreen: false,\n}\n"]}