{"version":3,"file":"Component.js","sourceRoot":"","sources":["../../../../../../src/documentation/app/layout/content/Component.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport styled, { css } from 'styled-components'\nimport Example from './components/Example'\nimport Props from './components/Props'\nimport Heading from './components/Heading'\n\nconst Wrapper = styled.div`\n  margin: 0px;\n  padding: 0px;\n  flex: 1 1 auto;\n  min-width: 0px;\n  display: flex;\n  flex-direction: column;\n  background: #fff;\n  max-width: 100%;\n  padding-bottom: 64px;\n`\n\nconst Container = styled.div`\n  flex: 1 1 auto;\n  min-width: 0px;\n  display: flex;\n  position: relative;\n`\n\nconst Body = styled.div`\n  display: block;\n  padding: 0px;\n  flex: 1 1 auto;\n`\n\nconst Description = styled.p`\n  font-size: 16px;\n  line-height: 24px;\n  margin-bottom: 40px;\n`\n\nconst PropTitle = styled.h3`\n  margin-top: 50px;\n  font-size: 24px;\n`\n\nconst ExampleWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: end;\n`\n\nconst IconComponentWrapper = styled.div`\n  ${(props) =>\n    props.isIcon &&\n    css`\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n    `}\n`\n\n// @ts-expect-error TS(7031) FIXME: Binding element 'fullscreen' implicitly has an 'an... Remove this comment to see the full error message\nconst ComponentExample = ({ fullscreen, name, folder, id }) => (\n  <Fragment>\n    {!fullscreen && folder[0] && (\n      <h4 key=\"heading\">{`${name} ${folder[0].title}s`}</h4>\n    )}\n    <ExampleWrapper key=\"example\">\n      {folder[0] ? (\n        // if this component example contains subfolders, then get example from each subfolder\n        // @ts-expect-error TS(7006) FIXME: Parameter 'example' implicitly has an 'any' type.\n        folder.map((example, idx) => (\n          <Example\n            key={name + idx}\n            // @ts-expect-error TS(2322) FIXME: Type '{ key: any; example: any; componentName: any... Remove this comment to see the full error message\n            example={example}\n            componentName={name}\n            id={id}\n          />\n        ))\n      ) : (\n        // otherwise just render the example\n        <Example\n          // @ts-expect-error TS(2322) FIXME: Type '{ example: any; componentName: any; id: any;... Remove this comment to see the full error message\n          example={folder}\n          componentName={name}\n          id={id}\n          key={name}\n          fullscreen={fullscreen}\n          merp=\"merp\"\n        />\n      )}\n    </ExampleWrapper>\n  </Fragment>\n)\n\n/** Page to display the shared component info taken from .jsx components */\n// @ts-expect-error TS(7031) FIXME: Binding element 'component' implicitly has an 'any... Remove this comment to see the full error message\nconst Component = ({ component, fullscreen }) => {\n  const { name, description, props, examples, id } = component\n  if (fullscreen) {\n    // @ts-expect-error TS(7006) FIXME: Parameter 'folder' implicitly has an 'any' type.\n    return examples.map((folder, idx) => (\n      <ComponentExample\n        fullscreen\n        folder={folder}\n        name={name}\n        id={id}\n        key={idx}\n      />\n    ))\n  }\n  return (\n    <Wrapper>\n      <Container>\n        <Body>\n          <Heading text={name} />\n          <Description>{description}</Description>\n          {examples.length > 0 && (\n            <PropTitle>\n              Example\n              {examples.length > 1 && 's'}\n            </PropTitle>\n          )}\n          <IconComponentWrapper isIcon={name === 'Icon'}>\n            {/* @ts-expect-error TS(7006) FIXME: Parameter 'folder' implicitly has an 'any' type. */}\n            {examples.map((folder, idx) => (\n              <ComponentExample folder={folder} name={name} id={id} key={idx} />\n            ))}\n          </IconComponentWrapper>\n          <PropTitle>Props</PropTitle>\n          {props ? <Props props={props} /> : 'This component accepts no props.'}\n        </Body>\n      </Container>\n    </Wrapper>\n  )\n}\n\nComponentExample.propTypes = {\n  fullscreen: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  folder: PropTypes.shape({\n    code: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n  id: PropTypes.string.isRequired,\n}\n\nComponentExample.defaultProps = {\n  fullscreen: false,\n}\n\nComponent.propTypes = {\n  /** Whether to show only the component (view: fullscreen) */\n  fullscreen: PropTypes.bool,\n\n  /** Component to display */\n  component: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    code: PropTypes.string.isRequired,\n    level: PropTypes.number.isRequired,\n  }).isRequired,\n}\n\nComponent.defaultProps = {\n  fullscreen: false,\n}\n\nexport default Component\n"]}